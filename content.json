{"meta":{"title":"1","subtitle":"","description":"","author":"Jas wang","url":"http://jas-wang.fun","root":"/"},"pages":[{"title":"MySQL性能优化","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-17T10:05:54.132Z","comments":true,"path":"mysql/index.html","permalink":"http://jas-wang.fun/mysql/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-07-17T07:46:41.639Z","updated":"2020-07-17T06:33:08.713Z","comments":false,"path":"categories/index.html","permalink":"http://jas-wang.fun/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-17T07:47:29.392Z","updated":"2020-07-17T06:33:08.713Z","comments":false,"path":"about/index.html","permalink":"http://jas-wang.fun/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"标签","date":"2020-07-17T05:15:29.000Z","updated":"2020-07-17T07:33:20.785Z","comments":false,"path":"tags/index.html","permalink":"http://jas-wang.fun/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-07-17T07:44:32.297Z","updated":"2020-07-17T06:33:08.714Z","comments":true,"path":"links/index.html","permalink":"http://jas-wang.fun/links/index.html","excerpt":"","text":""}],"posts":[{"title":"PHP性能分析工具——xhprof","slug":"php-xhprof","date":"2020-07-20T01:52:46.000Z","updated":"2020-07-20T09:31:56.547Z","comments":true,"path":"2020/07/20/php-xhprof/","link":"","permalink":"http://jas-wang.fun/2020/07/20/php-xhprof/","excerpt":"","text":"简介XHProf是一个分层PHP性能分析工具。它报告函数级别的请求次数和各种指标，包括阻塞时间，CPU时间和内存使用情况。Xhprof是facebook开源出来的一个php轻量级的性能分析工具，跟Xdebug类似，但性能开销更低，还可以用在生产环境中，也可以由程序开关来控制是否进行profile。 什么时候应该进行性能分析？在考虑是否进行性能分析时，你首先要想：应用是否存在性能问题？如果有，你要进一步考虑：这个问题有多大？如果你不这样做，将会陷入一个陷阱——过早优化，这可能会浪费你的时间。为了评断应用是否存在性能问题，你应该确定性能目标。例如，100 个并发用户的响应时间小于 1s 。然后，你需要进行基准测试，看是否达到这个目标。一个常见的错误是，在开发环境进行基准测试。事实上，你必须在生产环境进行基准测试。 XHProf + XHGuiXHProf 由 Facebook 开发的，包含一个基本的用户界面用于查看性能数据。此外，Paul Reinheimer 开发了 XHGui 和一个增强的用户界面（UI）用于查看、比较和分析性能数据。 安装1234567891.pecl 安装pecl install xhprof 安装完成直接重启php $ php -m | grep xhprofxhprof2.源码安装wget http:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;xhprof-0.9.4.tgztar -zxvf xhprof-0.9.4.tgz &amp;&amp; cd xhprof-0.9.4.tgzphpize &amp;&amp; .&#x2F;configure &amp;&amp; make &amp;&amp; make install 一旦你编译了该扩展程序，您必须启用它。为此，您需要在 php.ini 文件添加以下代码： 123[xhprof]extension &#x3D; xhprof.so xhprof.output_dir &#x3D; &#x2F;var&#x2F;www&#x2F;html&#x2F;php-run-tmp&#x2F; 定义输出文件的存放位置 完成后重启php具体文档可以查看官方文档地址 ：https://www.php.net/xhprof 例子 123456789101112131415161718192021$XHPROF_ROOT &#x3D; realpath(dirname(__FILE__) .&#39;&#x2F;..&#39;);include_once $XHPROF_ROOT . &quot;&#x2F;xhprof_lib&#x2F;utils&#x2F;xhprof_lib.php&quot;;include_once $XHPROF_ROOT . &quot;&#x2F;xhprof_lib&#x2F;utils&#x2F;xhprof_runs.php&quot;;&#x2F;&#x2F;开启xhprofxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);&#x2F;&#x2F;注册一个函数，当程序执行结束的时候去执行它。register_shutdown_function(function() &#123; &#x2F;&#x2F;stop profiler $xhprof_data &#x3D; xhprof_disable(); &#x2F;&#x2F;冲刷(flush)所有响应的数据给客户端 if (function_exists(&#39;fastcgi_finish_request&#39;)) &#123; fastcgi_finish_request(); &#125; $xhprof_runs &#x3D; new XHProfRuns_Default(); &#x2F;&#x2F;save the run under a namespace &quot;xhprof_foo&quot; $run_id &#x3D; $xhprof_runs-&gt;save_run($xhprof_data, &quot;xhprof_foo&quot;);&#125;); 默认的UI里列出了： funciton name ： 函数名 calls: 调用次数 Incl. Wall Time (microsec)： 函数运行时间（包括子函数） IWall%：函数运行时间（包括子函数）占比 Excl. Wall Time(microsec)：函数运行时间（不包括子函数） EWall%：函数运行时间（不包括子函数）","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"php","slug":"php","permalink":"http://jas-wang.fun/tags/php/"},{"name":"性能分析工具","slug":"性能分析工具","permalink":"http://jas-wang.fun/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"}]},{"title":"常见问题以及解决办法【todo】","slug":"question","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-20T09:14:10.472Z","comments":true,"path":"2020/07/17/question/","link":"","permalink":"http://jas-wang.fun/2020/07/17/question/","excerpt":"","text":"摘要这里收集了PHP中经常遇到的问题和解决的办法 高并发下如何防止修改同一条数据解决办法：","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"php","slug":"php","permalink":"http://jas-wang.fun/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://jas-wang.fun/tags/mysql/"},{"name":"高并发","slug":"高并发","permalink":"http://jas-wang.fun/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"}]},{"title":"MySQL性能优化","slug":"mysql","date":"2020-07-16T10:52:46.000Z","updated":"2020-07-20T00:41:48.668Z","comments":true,"path":"2020/07/16/mysql/","link":"","permalink":"http://jas-wang.fun/2020/07/16/mysql/","excerpt":"","text":"摘要","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"MySQL性能优化","slug":"MySQL性能优化","permalink":"http://jas-wang.fun/tags/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]},{"title":"PHP技术学习路线","slug":"route","date":"2020-07-15T01:52:46.000Z","updated":"2020-07-20T02:16:31.447Z","comments":true,"path":"2020/07/15/route/","link":"","permalink":"http://jas-wang.fun/2020/07/15/route/","excerpt":"","text":"入门阶段预备知识 掌握基本HTML、JS、CSS语法；熟悉 Bootstrap。验收最低标准：模仿写出jd.com或者vip.com首页第一屏内容。 熟悉Linux命令行熟悉常用发行版系统(CentOS、Ubuntu)安装熟悉常用命令行操作，包括文件管理、用户管理、权限管理、防火墙管理等熟悉VIM使用 验收最低标准：掌握lnmp环境搭建。 PHP基础 掌握PHP基础语法、文件上传、cookie、Session、JSON。 掌握MySQL数据库连接：pdo使用。 掌握redis连接及简单应用。 掌握命名空间。 掌握面向对象编程思想。 参考：https://www.runoob.com/php/php-tutorial.html 学习框架 学会使用ThinkPHP框架。主要是该框架在国内使用普及率太高了。不建议使用Laravel入门，因为该框架使用了较多的语法糖、第三方库，对新手可能有难度。 验收最低标准：可以使用ThinkPHP最新版作为入手框架，写出一个简单的博客。页面简单写就行。数据之间使用TP的 display 渲染到页面。 学习写接口 学会 Charles 抓包，看豆瓣的接口返回的数据。 学会写接口（GET、POST）的就行。 学会使用 POSTMAN。 验收标最低准：把上面的博客项目改成前后端分离的，先写完接口（最好有文档），再在页面里使用ajax调用接口数据。 至此，你已经入门了。如果需要继续往下，还要学习。 第二阶段PHP 使用 composer 安装PHP第三方库 对于PHP断点调试非常熟悉 学习常用PHP扩展 使用 SPL 掌握 PSR 规范 掌握反射的使用 掌握设计模式 熟练使用常用框架。 了解php和php-fpm的大部分配置选项和含义。 熟悉HTTP协议。 熟悉正则表达式。 MYSQL 熟悉MYSQL优化的一些技巧，例如MySQL的性能追查，包括slow_log/explain等；对于order by、limit、like等一些坑能避开；能够熟练使用常用的索引；对于表结构创建选用哪种数据类型做到胸有成竹等等。 熟悉常用的配置，知道如何调优。 熟练配置主从。 NOSQL 掌握Redis使用：对于常用数据结构的经典使用场景非常熟悉；了解Redis的事务、RDB、AOF等机制。 掌握memcache的使用，知道与redis的区别。 了解一下MongoDB。 Linux 熟悉常用文本命令：例如wc、awk、split、diff、grep、sed等。 熟悉sort、uniq的使用。 熟练掌握ps、netstat、top等命令使用。 熟练使用Supervisor。 熟悉如何编写shell脚本。 能够理解Nginx的配置的含义。 第三阶段PHP 该阶段PHP已经非常熟悉了，拥有快速开发项目、快速解决BUG的能力。代码遵循psr规范、稳定性很高。 熟悉消息队列使用，在很多场景合适的选择消息队列进行异步解耦。 熟悉如何使用 Elasticsearch 代替MYSQL的全文搜索功能。 熟悉多进程编程。 熟悉socket编程，对于网络IO模型有一定的认知，熟悉多路复用(select/poll/epoll)技术。 熟悉swoole框架，能应用于项目上。 不限制于框架本身，任何框架一天内快速入手。 对php的工作机制熟悉，熟悉php-fpm生命周期。 能够知道PHP相对于c等强类型语言性能为什么会慢。 对于PHP内部的实现原理有一定的认知，例如变量的实现、zend引擎的了解。 对于PHP的扩展有一定的认知，可以编写简单的扩展。 MYSQL 熟悉大批量的数据导入导出。对于线上大表操作可能带来的风险有预知。 熟悉分库分表。 对主从延迟能有效解决。 对于MySQL内置的一些函数能够熟练使用，熟悉触发器、存储过程的使用。 熟悉服务器核心性能优化选项 innodb_log_buffer_size、back_log、table_open_cache、thread_cache_size、innodb_lock_wait_timeout等。 对于MySQL内部索引的实现、事务隔离机制有一定的认知。 NoSQL redis常用5中数据类型之外的数据结构也要能掌握一些。如bitmap、GEO、HyperLogLog、pub/sub等。 redis里的事务、管道、分布式锁能熟练使用。 对于redis的服务端结构能有一定认知。 熟悉redis里如何使用Lua。 尝试阅读redis源码。 Linux 对于nginx非常熟悉，能够熟练配置https、负载均衡、反向代理；能够使用 lua-nginx-module。 对awk/sed 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据。 对于tcpdump、gdb、ltrace、strace、lsof等熟练使用。 其它 熟悉Linux应用编程：熟悉makefile使用；熟悉进程、信号、I/O知识；对于C语言有一定的了解。 熟练elk。 对于其它语言(例如java、c、golang）、其它领域(大数据)有一定的认知。 熟悉RPC、微服务架构。 能够支持对于千万级流量网站的正常开发维护工作。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"PHP学习路线","slug":"PHP学习路线","permalink":"http://jas-wang.fun/tags/PHP%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"PHP性能优化点","slug":"php","date":"2020-07-14T01:52:46.000Z","updated":"2020-07-20T08:44:27.698Z","comments":true,"path":"2020/07/14/php/","link":"","permalink":"http://jas-wang.fun/2020/07/14/php/","excerpt":"","text":"摘要对线上站点做压力测试的时候，我们一定要将请求数和并发数，特别是并发数要设置的比较低，我们不能对线上的网站造成压力问题，不管是自己的还是别人的。PHP性能问题一般不会超过占整个项目性能的50%，一般在30%~40%。 PHP 性能问题的解决方向一、语言级性能优化 指的是PHP语法基本功能，这部分优化比较简单易见、快速可行，比较快速看到效果 1.压力测试工具 Apache Benchmark (ab) ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件123456$ ./ab -n1000 -c100 http://www.baidu.com/-n ：总共的请求执行数，缺省是1；-c： 并发数，缺省是1；-t：测试所进行的总时间，秒为单位，缺省50000s-p：POST时的数据文件-w: 以HTML表的格式输出结果 参考项1234567Failed requests: 0 &#x2F;&#x2F;失败的请求数量。因网络原因或服务器性能原因，发起的请求并不一定全部成功，通过该数值和Complete requests相除可以计算请求的失败率，作为测试结果的重要参考。Total transferred: 103314 bytes&#x2F;&#x2F;总共传输的数据量，指的是ab从被测服务器接收到的总数据量，包括index.html的文本内容和请求头信息。HTML transferred: 22700 bytes &#x2F;&#x2F;从服务器接收到的index.html文件的总大小，等于Document Length＊Complete requests＝227 bytes＊100＝22700 bytesRequests per second: 91.50 [#&#x2F;sec] (mean) &#x2F;&#x2F;平均(mean)每秒完成的请求数：QPS，这是一个平均值，等于Complete requests&#x2F;Time taken for tests&#x3D;100&#x2F;1.093&#x3D;91.50Time per request: 109.287 [ms] (mean) &#x2F;&#x2F;从用户角度看，完成一个请求所需要的时间（因用户数量不止一个，服务器完成10个请求，平均每个用户才接收到一个完整的返回，所以该值是下一项数值的10倍。）Time per request: 10.929 [ms] (mean, across all concurrent requests)&#x2F;&#x2F; 服务器完成一个请求的时间。Transfer rate: 92.32 [Kbytes&#x2F;sec] received&#x2F;&#x2F;网络传输速度。对于大文件的请求测试，这个值很容易成为系统瓶颈所在。要确定该值是不是瓶颈，需要了解客户端和被测服务器之间的网络情况，包括网络带宽和网卡速度等信息。 2.PHP 自身能力少写代码，多用 PHP 自身能力 自身代码冗余较多，可读性不佳，并且性能低。为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。多使用 PHP 内置变量、常量、函数。 PHP 代码运行流程 php文件 -&gt; zend引擎 -&gt; [Parser] -&gt; Opcodes(要被执行的代码,目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。) -&gt; [Exec] =&gt; Output PHP 内置函数之间的性能测试 12array_key_exists() 和 isset()php 执行效率上： isset &gt; array_key_exists 当数组个数为10时，两者差异就体现出来了，isset 速度要快近10倍，但不是很明显，而且对于变量是否存在，两者之间的差异没有太大，当变量存在时运行更快，但是这种趋势在是非常微弱的。 使用 array_key_exists 随着循环的次数增加，程序运行的时间增加量是成几何级数增加的，当一个数组元素个数超过1000时运行速度就非常慢了。 由于 isset 属于 php 中的语言结构，而 array_key_exists 是函数，所以 isset 更快。 3.减少 PHP 魔法函数的使用PHP自身提供的魔法函数，性能并不是很好 ,是为了给 PHP 程序员省事，PHP 语言为你做了很多，所以尽量减少魔法函数的使用。 4.Linux time命令-可以查看PHP文件的执行耗时1234[root@localhost wwwroot]# time php index.phpreal 0m0.070suser 0m0.050s (关注这个)sys 0m0.020s 在上面运行的结果中，我们只关注user的那一行时间，关于这三个时间的解释，可以参考下面的解释： real 时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。 user 时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。 sys 时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。 5.错误抑制符 @@的实际逻辑：在代码开始前、结束后，增加 Opcode，忽略报错性能测试 123456789101112131415&#x2F;&#x2F;at.phpfile_get_contens(&#39;xxx&#39;); &#x2F;&#x2F; 直接获取一个不存在文件的内容，此时会报错方便查看执行过程我们可以使用 vld 扩展执行at.php，查看执行过程的完整 Opcodephp -dvld.active&#x3D;1 -dvld.execute&#x3D;0 at.php# 不加@错误抑制符时Opcode的执行情况SEND_VALDO_FCALLRETURN# 加@错误抑制符时Opcode的执行情况BEGIN_SILENCESEND_VALDO_FCALLEND_SILENCERETURN 建议：可以使用 try throw 方式进行错误控制 6.合理使用内存PHP 有内存回收机制保底，但也要小心使用内存 利用 unset()及时释放不使用的内存 7.避免在循环内做运算1234567891011121314优化前$str &#x3D; &quot;hello world&quot;;for ($i&#x3D;0; $i &lt; strlen($str); $i++) &#123; # code...&#125;&#x2F;&#x2F; 其中strlen()方法会在每次循环时计算一次&#x2F;&#x2F; 进行优化$str &#x3D; &quot;hello world&quot;;$strlen &#x3D; strlen($str);for ($i&#x3D;0; $i &lt; $strlen; $i++) &#123; # code...&#125; 8.务必适用带引号字符串做键值PHP 会将没有引号的键值当做常量，产生查找常量的开销 12345678define(&#39;key&#39;, &#39;test&#39;);$array &#x3D; array( &#39;key&#39; &#x3D;&gt; &#39;1&#39;, &#39;test&#39; &#x3D;&gt; &#39;2&#39;);echo $array[&quot;key&quot;] . &#39;\\n&#39;; &#x2F;&#x2F; 输出 1echo $array[key] . &#39;\\n&#39;; &#x2F;&#x2F; 输出 2 当时用$array[key]时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析 二、PHP 周边环境影响1.运行环境 Linux运行环境 文件存储 （读写磁盘，数据库，内存，网络数据） 数据库 缓存 【内存，PHP缓存技术，redis】 网络 优化方向 123456-读写内存 &lt;&lt;(远小于) 读写数据库[基于文件系统，操作本地磁盘] &lt;(小于) 读写磁盘 &lt; 读写网络数据-数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 &#x3D;&gt; 数据库介于内存和磁盘之间-网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响， 延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。 建议：尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。 2.优化网络请求(1).网络请求的坑：对方接口的不确定因素 ,网络的稳定性(2).如何优化网络请求？ 设置超时时间：（连接超时，读超时，写超时） 将串行请求并行化：使用 curlmulti*() =&gt; 最简单，但是并不是最好用；使用 swoole 扩展 =&gt; 效果更好curl_multi实现并发列子 3.开启PHP慢日志查询 找到php-fpm.conf文件 去掉request_slowlog_timeout前面的分号，并设置时间。如：request_slowlog_timeout=5表示超过5秒的 慢日志文件位置默认在php的安装目录下的log文件夹中，可以通过修改slowlog = log/$pool.log.slow参数来指定。 php-fpm慢日志的例子，慢日志会记录下进程号，脚本名称，具体哪个文件哪行代码的哪个函数执行时间过长。 request_slowlog_timeout 和 slowlog需要同时设置，开启request_slowlog_timeout的同时需要开启 slowlog 慢日志路径需要手动创建 (slowlog) 4.借助 xhprof 工具分析 PHP 性能php-性能分析工具-xhprof 三、 PHP 性能瓶颈终极办法1.APC (Alternative PHP Cache) 是一款开源的php插件,用来对php的代码或者用户数据进行缓存。 apc可以去掉php动态解析以及编译的时间，php脚本可以执行的更快。 PHP是一个动态脚本语言，所以为了让用户在浏览器中看到页面内容，服务器必须解析php代码从而生成想用的html代码。从上面的图中可以看出，在没有apc的时候，用户对php页面的每一次请求，服务器都需要进行对php进行解析，编译以及执行，但是很多时候，只要php代码没有发生更改，php的执行逻辑就不会改变，也就是说解析以及编译的过程就可以省略，直接执行然后将结果返回即可。这就是apc的工作，apc缓存php的可执行代码，从而去掉了解析以及编译的过程，加快了php脚本的执行速度。 缓存数据量小，大的话建议redis或者memcache 这里有一个简单的例子对比redis 和 apc 123456789101112131415161718192021222324252627function getTimeStamp() &#123; $timestr &#x3D; microtime(); $timestrary &#x3D; explode(&#39; &#39;, $timestr); $result &#x3D; intval($timestrary[1])*1000 + intval(floatval($timestrary[0])*1000); return $result; &#125; $redis &#x3D; new Redis(); $redis-&gt;connect(&#39;127.0.0.1&#39;, 6379); $key &#x3D; &#39;key&#39;; $value &#x3D;&#39;value&#39;; $redis-&gt;set($key, $value); apc_store($key, $value, 1); $begin &#x3D; getTimeStamp(); for($i &#x3D; 0 ; $i &lt; 100000 ; $i &#x3D; $i +1) &#123; $result &#x3D; apc_fetch($key); &#125; $cost &#x3D; getTimeStamp() - $begin; var_dump($cost); $begin &#x3D; getTimeStamp(); for($i &#x3D; 0 ; $i &lt; 100000 ; $i &#x3D; $i +1) &#123; $result &#x3D; $redis-&gt;get($key); &#125; $cost &#x3D; getTimeStamp() - $begin; var_dump($cost); $redis-&gt;close(); 都是简单的取数据操作，分别进行10万次，单位是毫秒。最后的运行结果redis10万次读在4-5秒之间，而apc得10万次读只有50毫秒左右。可以看到如果是简单的缓存一些数据，并且这些数据不会变化且命中的话，apc还是能带来一定的效率提升的。 apc php.ini 配置参数 1234567extension&#x3D; apc.so &#x2F;&#x2F;添加扩展apc.enabled&#x3D;1 &#x2F;&#x2F;开启apcapc.shm_segments&#x3D;1 apc.shm_size&#x3D;64M ; apc内存的大小,最后的大小需要乘上segments的数量，所以这里一共为apc分配64M apc.ttl&#x3D;7200 apc.user_ttl&#x3D;7200 apc.enable_cli&#x3D;1 ; 这个如果不开启，则只可以在网页上进行apc操作，不能通过cli进行apc操作","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"php底层优化","slug":"php底层优化","permalink":"http://jas-wang.fun/tags/php%E5%BA%95%E5%B1%82%E4%BC%98%E5%8C%96/"}]}],"categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"php","slug":"php","permalink":"http://jas-wang.fun/tags/php/"},{"name":"性能分析工具","slug":"性能分析工具","permalink":"http://jas-wang.fun/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"},{"name":"mysql","slug":"mysql","permalink":"http://jas-wang.fun/tags/mysql/"},{"name":"高并发","slug":"高并发","permalink":"http://jas-wang.fun/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"},{"name":"MySQL性能优化","slug":"MySQL性能优化","permalink":"http://jas-wang.fun/tags/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"PHP学习路线","slug":"PHP学习路线","permalink":"http://jas-wang.fun/tags/PHP%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"php底层优化","slug":"php底层优化","permalink":"http://jas-wang.fun/tags/php%E5%BA%95%E5%B1%82%E4%BC%98%E5%8C%96/"}]}