{"meta":{"title":"1","subtitle":"","description":"","author":"Jas wang","url":"http://jas-wang.fun","root":"/"},"pages":[{"title":"关于","date":"2020-07-17T07:47:29.392Z","updated":"2020-07-17T06:33:08.713Z","comments":false,"path":"about/index.html","permalink":"http://jas-wang.fun/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-07-17T07:46:41.639Z","updated":"2020-07-17T06:33:08.713Z","comments":false,"path":"categories/index.html","permalink":"http://jas-wang.fun/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-07-17T07:44:32.297Z","updated":"2020-07-17T06:33:08.714Z","comments":true,"path":"links/index.html","permalink":"http://jas-wang.fun/links/index.html","excerpt":"","text":""},{"title":"MySQL性能优化","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-17T10:05:54.132Z","comments":true,"path":"mysql/index.html","permalink":"http://jas-wang.fun/mysql/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-17T05:15:29.000Z","updated":"2020-07-17T07:33:20.785Z","comments":false,"path":"tags/index.html","permalink":"http://jas-wang.fun/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PHP性能优化","slug":"php","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-20T01:34:26.979Z","comments":true,"path":"2020/07/17/php/","link":"","permalink":"http://jas-wang.fun/2020/07/17/php/","excerpt":"","text":"摘要对线上站点做压力测试的时候，我们一定要将请求数和并发数，特别是并发数要设置的比较低，我们不能对线上的网站造成压力问题，不管是自己的还是别人的。PHP性能问题一般不会超过占整个项目性能的50%，一般在30%~40%。 PHP 性能问题的解决方向一、语言级性能优化 指的是PHP语法基本功能，这部分优化比较简单易见、快速可行，比较快速看到效果 1.压力测试工具 Apache Benchmark (ab) ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件123456$ ./ab -n1000 -c100 http://www.baidu.com/-n ：总共的请求执行数，缺省是1；-c： 并发数，缺省是1；-t：测试所进行的总时间，秒为单位，缺省50000s-p：POST时的数据文件-w: 以HTML表的格式输出结果 参考项1234567Failed requests: 0 &#x2F;&#x2F;失败的请求数量。因网络原因或服务器性能原因，发起的请求并不一定全部成功，通过该数值和Complete requests相除可以计算请求的失败率，作为测试结果的重要参考。Total transferred: 103314 bytes&#x2F;&#x2F;总共传输的数据量，指的是ab从被测服务器接收到的总数据量，包括index.html的文本内容和请求头信息。HTML transferred: 22700 bytes &#x2F;&#x2F;从服务器接收到的index.html文件的总大小，等于Document Length＊Complete requests＝227 bytes＊100＝22700 bytesRequests per second: 91.50 [#&#x2F;sec] (mean) &#x2F;&#x2F;平均(mean)每秒完成的请求数：QPS，这是一个平均值，等于Complete requests&#x2F;Time taken for tests&#x3D;100&#x2F;1.093&#x3D;91.50Time per request: 109.287 [ms] (mean) &#x2F;&#x2F;从用户角度看，完成一个请求所需要的时间（因用户数量不止一个，服务器完成10个请求，平均每个用户才接收到一个完整的返回，所以该值是下一项数值的10倍。）Time per request: 10.929 [ms] (mean, across all concurrent requests)&#x2F;&#x2F; 服务器完成一个请求的时间。Transfer rate: 92.32 [Kbytes&#x2F;sec] received&#x2F;&#x2F;网络传输速度。对于大文件的请求测试，这个值很容易成为系统瓶颈所在。要确定该值是不是瓶颈，需要了解客户端和被测服务器之间的网络情况，包括网络带宽和网卡速度等信息。 2.PHP 自身能力少写代码，多用 PHP 自身能力 自身代码冗余较多，可读性不佳，并且性能低。为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。多使用 PHP 内置变量、常量、函数。 PHP 代码运行流程 php文件 -&gt; zend引擎 -&gt; [Parser] -&gt; Opcodes(要被执行的代码,目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。) -&gt; [Exec] =&gt; Output PHP 内置函数之间的性能测试 12array_key_exists() 和 isset()php 执行效率上： isset &gt; array_key_exists 当数组个数为10时，两者差异就体现出来了，isset 速度要快近10倍，但不是很明显，而且对于变量是否存在，两者之间的差异没有太大，当变量存在时运行更快，但是这种趋势在是非常微弱的。 使用 array_key_exists 随着循环的次数增加，程序运行的时间增加量是成几何级数增加的，当一个数组元素个数超过1000时运行速度就非常慢了。 由于 isset 属于 php 中的语言结构，而 array_key_exists 是函数，所以 isset 更快。 3.减少 PHP 魔法函数的使用PHP自身提供的魔法函数，性能并不是很好 ,是为了给 PHP 程序员省事，PHP 语言为你做了很多，所以尽量减少魔法函数的使用。 4.linux time命令-可以查看PHP文件的执行耗时1234[root@localhost wwwroot]# time php index.phpreal 0m0.070suser 0m0.050s (关注这个)sys 0m0.020s 在上面运行的结果中，我们只关注user的那一行时间，关于这三个时间的解释，可以参考下面的解释： real 时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。 user 时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。 sys 时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。 5.错误抑制符 @@的实际逻辑：在代码开始前、结束后，增加 Opcode，忽略报错性能测试 123456789101112131415&#x2F;&#x2F;at.phpfile_get_contens(&#39;xxx&#39;); &#x2F;&#x2F; 直接获取一个不存在文件的内容，此时会报错方便查看执行过程我们可以使用 vld 扩展执行at.php，查看执行过程的完整 Opcodephp -dvld.active&#x3D;1 -dvld.execute&#x3D;0 at.php# 不加@错误抑制符时Opcode的执行情况SEND_VALDO_FCALLRETURN# 加@错误抑制符时Opcode的执行情况BEGIN_SILENCESEND_VALDO_FCALLEND_SILENCERETURN 建议：可以使用 try throw 方式进行错误控制 6.合理使用内存PHP 有内存回收机制保底，但也要小心使用内存 利用 unset()及时释放不使用的内存 7.避免在循环内做运算1234567891011121314优化前$str &#x3D; &quot;hello world&quot;;for ($i&#x3D;0; $i &lt; strlen($str); $i++) &#123; # code...&#125;&#x2F;&#x2F; 其中strlen()方法会在每次循环时计算一次&#x2F;&#x2F; 进行优化$str &#x3D; &quot;hello world&quot;;$strlen &#x3D; strlen($str);for ($i&#x3D;0; $i &lt; $strlen; $i++) &#123; # code...&#125; 8.务必适用带引号字符串做键值PHP 会将没有引号的键值当做常量，产生查找常量的开销 12345678define(&#39;key&#39;, &#39;test&#39;);$array &#x3D; array( &#39;key&#39; &#x3D;&gt; &#39;1&#39;, &#39;test&#39; &#x3D;&gt; &#39;2&#39;);echo $array[&quot;key&quot;] . &#39;\\n&#39;; &#x2F;&#x2F; 输出 1echo $array[key] . &#39;\\n&#39;; &#x2F;&#x2F; 输出 2 当时用$array[key]时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析 二、PHP 周边环境影响1.运行环境 Linux运行环境 文件存储 （读写磁盘，数据库，内存，网络数据） 数据库 缓存 【内存，PHP缓存技术，redis】 网络 优化方向 123456-读写内存 &lt;&lt;(远小于) 读写数据库[基于文件系统，操作本地磁盘] &lt;(小于) 读写磁盘 &lt; 读写网络数据-数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 &#x3D;&gt; 数据库介于内存和磁盘之间-网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响， 延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。 建议：尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"php底层优化","slug":"php底层优化","permalink":"http://jas-wang.fun/tags/php%E5%BA%95%E5%B1%82%E4%BC%98%E5%8C%96/"}]},{"title":"常见问题以及解决办法","slug":"question","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-20T00:44:57.606Z","comments":true,"path":"2020/07/17/question/","link":"","permalink":"http://jas-wang.fun/2020/07/17/question/","excerpt":"","text":"摘要对线上站点做压力测试的时候，我们一定要将请求数和并发数，特别是并发数要设置的比较低，我们不能对线上的网站造成压力问题，不管是自己的还是别人的。PHP性能问题一般不会超过占整个项目性能的50%，一般在30%~40%。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"php","slug":"php","permalink":"http://jas-wang.fun/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://jas-wang.fun/tags/mysql/"},{"name":"高并发","slug":"高并发","permalink":"http://jas-wang.fun/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"}]},{"title":"MySQL性能优化","slug":"mysql","date":"2020-07-16T10:52:46.000Z","updated":"2020-07-20T00:41:48.668Z","comments":true,"path":"2020/07/16/mysql/","link":"","permalink":"http://jas-wang.fun/2020/07/16/mysql/","excerpt":"","text":"摘要","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"MySQL性能优化","slug":"MySQL性能优化","permalink":"http://jas-wang.fun/tags/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]}],"categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"php底层优化","slug":"php底层优化","permalink":"http://jas-wang.fun/tags/php%E5%BA%95%E5%B1%82%E4%BC%98%E5%8C%96/"},{"name":"php","slug":"php","permalink":"http://jas-wang.fun/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://jas-wang.fun/tags/mysql/"},{"name":"高并发","slug":"高并发","permalink":"http://jas-wang.fun/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"},{"name":"MySQL性能优化","slug":"MySQL性能优化","permalink":"http://jas-wang.fun/tags/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]}