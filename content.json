{"meta":{"title":"1","subtitle":"","description":"","author":"Jas wang","url":"http://jas-wang.fun","root":"/"},"pages":[{"title":"关于","date":"2020-07-17T07:47:29.392Z","updated":"2020-07-17T06:33:08.713Z","comments":false,"path":"about/index.html","permalink":"http://jas-wang.fun/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-07-17T07:46:41.639Z","updated":"2020-07-17T06:33:08.713Z","comments":false,"path":"categories/index.html","permalink":"http://jas-wang.fun/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-07-17T07:44:32.297Z","updated":"2020-07-17T06:33:08.714Z","comments":true,"path":"links/index.html","permalink":"http://jas-wang.fun/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-17T05:15:29.000Z","updated":"2020-07-17T07:33:20.785Z","comments":false,"path":"tags/index.html","permalink":"http://jas-wang.fun/tags/index.html","excerpt":"","text":""},{"title":"MySQL性能优化","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-17T10:05:54.132Z","comments":true,"path":"mysql/index.html","permalink":"http://jas-wang.fun/mysql/index.html","excerpt":"","text":""}],"posts":[{"title":"常见问题以及解决办法【持续更新中...】","slug":"question","date":"2020-07-22T01:52:46.000Z","updated":"2020-07-22T00:49:54.803Z","comments":true,"path":"2020/07/22/question/","link":"","permalink":"http://jas-wang.fun/2020/07/22/question/","excerpt":"","text":"摘要这里收集了PHP中经常遇到的问题和解决的办法,遇到了就会添加进来 高并发下如何防止修改同一条数据？解决方案： 使用悲观锁 悲观锁本质是当前只有一个线程执行操作，排斥外部请求的修改。遇到加锁的状态，就必须等待。结束了唤醒其他线程进行处理。虽然此方案的确解决了数据安全的问题，但是，我们的场景是“高并发”。也就是说，会很多这样的修改请求，每个请求都需要等待“锁”，某些线程可能永远都没有机会抢到这个“锁”，这种请求就会死在那里。同时，这种请求会很多，瞬间增大系统的平均响应时间，结果是可用连接数被耗尽，系统陷入异常。可以举个例子 1234567891011121314151617181920使用MySQL的事务，锁住操作的行&#x2F;&#x2F;库存是否大于0mysqli_query($conn,&quot;BEGIN&quot;); &#x2F;&#x2F;开始事务$sql&#x3D;&quot;select number from xxxx FOR UPDATE&quot;;&#x2F;&#x2F;此时这条记录被锁住,其它事务必须等待此次事务提交后才能执行$rs&#x3D;mysqli_query($conn,$sql);$row&#x3D;$rs-&gt;fetch_assoc();if($row[&#39;number&#39;]&gt;0)&#123; &#x2F;&#x2F;库存减少 $sql&#x3D;&quot;update ih_store set number&#x3D;number-&#123;$number&#125; where sku_id&#x3D;&#39;$sku_id&#39;&quot;; $store_rs&#x3D;mysqli_query($conn,$sql); if($store_rs)&#123; echo &#39;库存减少成功&#39;; mysqli_query($conn,&quot;COMMIT&quot;);&#x2F;&#x2F;事务提交即解锁 &#125;else&#123; echo &#39;库存减少失败&#39;; &#125;&#125;else&#123; echo &#39;库存不够&#39;; mysqli_query($conn,&quot;ROLLBACK&quot;);&#125; 使用乐观锁乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则不允许更新。有很多软件和服务都“乐观锁”功能的支持，例如Redis中的watch就是其中之一。通过这个实现，我们保证了数据的安全。12345678910111213141516171819202122232425$redis &#x3D; new redis(); $result &#x3D; $redis-&gt;connect(&#39;127.0.0.1&#39;, 6379); echo $mywatchkey &#x3D; $redis-&gt;get(&quot;mywatchkey&quot;);$rob_total &#x3D; 100; &#x2F;&#x2F;抢购数量if($mywatchkey&lt;&#x3D;$rob_total)&#123; $redis-&gt;watch(&quot;mywatchkey&quot;); $redis-&gt;multi(); &#x2F;&#x2F;在当前连接上启动一个新的事务。 &#x2F;&#x2F;插入抢购数据 $redis-&gt;set(&quot;mywatchkey&quot;,$mywatchkey+1); $rob_result &#x3D; $redis-&gt;exec(); if($rob_result)&#123; $redis-&gt;hSet(&quot;watchkeylist&quot;,&quot;user_&quot;.mt_rand(1, 9999),$mywatchkey); $mywatchlist &#x3D; $redis-&gt;hGetAll(&quot;watchkeylist&quot;); echo &quot;抢购成功！&lt;br&#x2F;&gt;&quot;; echo &quot;剩余数量：&quot;.($rob_total-$mywatchkey-1).&quot;&lt;br&#x2F;&gt;&quot;; echo &quot;用户列表：&lt;pre&gt;&quot;; var_dump($mywatchlist); &#125;else&#123; $redis-&gt;hSet(&quot;watchkeylist&quot;,&quot;user_&quot;.mt_rand(1, 9999),&#39;meiqiangdao&#39;); echo &quot;手气不好，再抢购！&quot;;exit; &#125;&#125; Redis相比memcached有哪些优势？解决方案： memcached所有的值均是简单的字符串，Redis作为其替代者，支持更为丰富的数据类型 Redis的速度比memcached快很多 Redis可以持久化其数据 Redis支持数据的备份，即master-slave模式的数据备份。 Redis提供了哪几种持久化方式？解决方案： Redis主要提供了两种持久化机制：RDB和AOF； RDB 默认开启，会按照配置的指定时间将内存中的数据快照到磁盘中，创建一个dump.rdb文件，Redis启动时再恢复到内存中。 Redis会单独创建fork()一个子进程，将当前父进程的数据库数据复制到子进程的内存中，然后由子进程写入到临时文件中，持久化的过程结束了，再用这个临时文件替换上次的快照文件，然后子进程退出，内存释放。 需要注意的是，每次快照持久化都会将主进程的数据库数据复制一遍，导致内存开销加倍，若此时内存不足，则会阻塞服务器运行，直到复制结束释放内存；都会将内存数据完整写入磁盘一次，所以如果数据量大的话，而且写操作频繁，必然会引起大量的磁盘I/O操作，严重影响性能，并且最后一次持久化后的数据可能会丢失； AOF 以日志的形式记录每个写操作（读操作不记录），只需追加文件但不可以改写文件，Redis启动时会根据日志从头到尾全部执行一遍以完成数据的恢复工作。包括flushDB也会执行。 主要有两种方式触发：有写操作就写、每秒定时写（也会丢数据）。 因为AOF采用追加的方式，所以文件会越来越大，针对这个问题，新增了重写机制，就是当日志文件大到一定程度的时候，会fork出一条新进程来遍历进程内存中的数据，每条记录对应一条set语句，写到临时文件中，然后再替换到旧的日志文件（类似rdb的操作方式）。默认触发是当aof文件大小是上次重写后大小的一倍且文件大于64M时触发。 当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。一般情况下，只要使用默认开启的RDB即可，因为相对于AOF，RDB便于进行数据库备份，并且恢复数据集的速度也要快很多。 开启持久化缓存机制，对性能会有一定的影响，特别是当设置的内存满了的时候，更是下降到几百reqs/s。所以如果只是用来做缓存的话，可以关掉持久化。 多线程写入同一个文件的时候，如何解决“线程安全”的问题？解决方案： 首先什么是线程安全？多个线程同时运行同一段代码，如果每次运行结果和单线程运行的结果是一样的，结果和预期相同，就是线程安全的）。 如果是MySQL数据库，可以使用它自带的锁机制很好的解决问题。 但是，在大规模并发的场景中，是不推荐使用MySQL的。举例如下 1234567if (flock($file,LOCK_EX)) &#123; fwrite($file,&#39;write something&#39;); flock($file,LOCK_UN);&#125;else&#123; echo &#39;locked&#39;;&#125;fclose($file);","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/tags/MySQL/"},{"name":"高并发","slug":"高并发","permalink":"http://jas-wang.fun/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"}]},{"title":"Linux-常用命令","slug":"linux","date":"2020-07-21T01:00:46.000Z","updated":"2020-07-21T03:24:53.228Z","comments":true,"path":"2020/07/21/linux/","link":"","permalink":"http://jas-wang.fun/2020/07/21/linux/","excerpt":"","text":"摘要Linux 常用命令学习 1. find -命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。语法 12345678910find path -option [ -print ] [ -exec -ok command ] &#123;&#125; \\;-name 按名字查找-perm 根据权限查找-ctime –n +m 根据创建时间查找，-n n天内，+n n天之前-mtime –n +n 最后修改时间-exec command &#123;&#125; \\; 对每条记录执行command-ok command &#123;&#125;\\;同上例：find . –name “*.log” –exec ls –al &#123;&#125; \\;find &#x2F;var -name &quot;*.log&quot; -mtime +10 -exec ls -l &#123;&#125; \\; 实例 123456789101112将目前目录及其子目录下所有延伸档名是 c 的文件列出来。# find . -name &quot;*.c&quot;将目前目录其其下子目录中所有一般文件列出# find . -type f将目前目录及其子目录下所有最近 20 天内更新过的文件列出# find . -ctime -20查找&#x2F;var&#x2F;log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：# find &#x2F;var&#x2F;log -type f -mtime +7 -ok rm &#123;&#125; \\;查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：# find . -type f -perm 644 -exec ls -l &#123;&#125; \\;为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：# find &#x2F; -type f -size 0 -exec ls -l &#123;&#125; \\; 2. grep 命令用于查找文件里符合条件的字符串如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。 123456789grep –c “sdf” *.txt 只返回匹配的行数grep –n 输出行号grep “2010-5-1[0-9]” myfile 10号到19号的grep “^[^123]” myfile 不是以1，2，3大头的grep “4\\&#123;2\\&#125;” myfile 连续2个4grep “4\\&#123;2,\\&#125;” myfile 连续至少2个4grep “4\\&#123;2,5\\&#125;” myfile 连续2到5个4grep “^$” myfile 空行grep “\\^” myfile 查找^符号，用\\过滤掉转义 3. wc命令用于计算字数利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则wc指令会从标准输入设备读取数据语法wc [-clw][–help][–version][文件…] 123456参数：-c或--bytes或--chars 只显示Bytes数。-l或--lines 只显示行数。-w或--words 只显示字数。--help 在线帮助。--version 显示版本信息。 实例在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。使用的命令为：使用 wc统计，结果如下： 12$ wc testfile # testfile文件的统计信息 3 92 598 testfile # testfile文件的行数为3、单词数92、字节数598 4. awk（很好很强大）AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。 选项参数说明 12345678910111213141516171819202122232425-F fs or --field-separator fs指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。-v var&#x3D;value or --asign var&#x3D;value赋值一个用户定义变量。-f scripfile or --file scriptfile从脚本文件中读取awk命令。-mf nnn and -mr nnn对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。-W compact or --compat, -W traditional or --traditional在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。-W copyleft or --copyleft, -W copyright or --copyright打印简短的版权信息。-W help or --help, -W usage or --usage打印全部awk选项和每个选项的简短说明。-W lint or --lint打印不能向传统unix平台移植的结构的警告。-W lint-old or --lint-old打印关于不能向传统unix平台移植的结构的警告。-W posix打开兼容模式。但有以下限制，不识别：&#x2F;x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**&#x3D;不能代替^和^&#x3D;；fflush无效。-W re-interval or --re-inerval允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。-W source program-text or --source program-text使用program-text作为源代码，可与-f命令混用。-W version or --version 基本用法 12345678910111213新建 log.txt文本内容如下：2 this is a test3 Are you like awkThis&#39;s a test10 There are orange,apple,mongo---------------------------------------------每行按空格或TAB分割，输出文本中的1、4项$ awk &#39;&#123;print $1,$4&#125;&#39; log.txt--------------------------------------------- 2 a 3 like This&#39;s 10 orange,apple,mongo 5. sed 命令是利用脚本来处理文本文件。sed 可依照脚本的指令来处理、编辑文本文件。Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。 123456$ sed -e 4a\\newline testfile #使用sed 在第四行后添加新字符串 HELLO LINUX! #testfile文件原有的内容 Linux is a free unix-type opterating system. This is a linux testfile! Linux test newline 6. sort 排序命令1234567-c 检查文件是否已排序-u unique的意思，排序后重复记录只显示一条-r reverse,反序-n 数字排序-kn 按第n个域进行排序，相当于+ n-1 –n，现在推荐用-k--------------------------------------------------sort -t: -k3 messages | head 等同于sort -t: +2 -3 messages | head 7. Linux uniq 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用。从一个文本中去除或禁止重复行，这里的重复行指的是相邻的！可与sort结合使用。实例 123456789-c 显示每条记录重复的行数-u 只显示不重复的行，即-c为1的那些行-d只显示记录重复的行，但每条只显示1次--------------------------------------------------$ uniq -c testfile #删除重复行后的内容 3 test 30 #前面的数字的意义为该行共出现了3次 4 Hello 95 #前面的数字的意义为该行共出现了4次 2 Linux 85 #前面的数字的意义为该行共出现了2次","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jas-wang.fun/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jas-wang.fun/tags/Linux/"},{"name":"服务器","slug":"服务器","permalink":"http://jas-wang.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"PHP常用设计模式","slug":"php-design","date":"2020-07-17T01:52:46.000Z","updated":"2020-07-22T00:49:11.688Z","comments":true,"path":"2020/07/17/php-design/","link":"","permalink":"http://jas-wang.fun/2020/07/17/php-design/","excerpt":"","text":"命名空间(PHP 5 &gt;= 5.3.0, PHP 7)什么是命名空间？从广义上来说，命名空间是一种封装事物的方法。在很多地方都可以见到这种抽象概念。例如，在操作系统中目录用来将相关文件分组，对于目录中的文件来说，它就扮演了命名空间的角色。具体举个例子，文件 foo.txt 可以同时在目录/home/greg 和 /home/other 中存在，但在同一个目录中不能存在两个 foo.txt 文件。另外，在目录 /home/greg 外访问 foo.txt 文件时，我们必须将目录名以及目录分隔符放在文件名之前得到 /home/greg/foo.txt。这个原理应用到程序设计领域就是命名空间的概念。 在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题： 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。下面是一个说明 PHP 命名空间语法的示例：123456789101112131415&lt;?phpnamespace my\\name; &#x2F;&#x2F; 参考 &quot;定义命名空间&quot; 小节class MyClass &#123;&#125;function myfunction() &#123;&#125;const MYCONST &#x3D; 1;$a &#x3D; new MyClass;$c &#x3D; new \\my\\name\\MyClass; &#x2F;&#x2F; 参考 &quot;全局空间&quot; 小节$a &#x3D; strlen(&#39;hi&#39;); &#x2F;&#x2F; 参考 &quot;使用命名空间：后备全局函数&#x2F;常量&quot; 小节$d &#x3D; namespace\\MYCONST; &#x2F;&#x2F; 参考 &quot;namespace操作符和__NAMESPACE__常量” 小节$d &#x3D; __NAMESPACE__ . &#39;\\MYCONST&#39;;echo constant($d); &#x2F;&#x2F; 参考 &quot;命名空间和动态语言特征&quot; 小节?&gt; 类的自动载入12345678910111213&lt;?php&#x2F;&#x2F; 老的版本 ：require&#x2F;inclue 方便当类删除的时候，避免致命错误！&#x2F;&#x2F; spl_autoload_register() - 注册给定的函数作为 __autoload 的实现class Test1&#123; static function test()&#123; echo __FILE__; &#125;&#125;spl_autoload_register(function ($class)&#123; require __DIR__.&#39;&#x2F;&#39;.$class.&#39;.php&#39;;&#125;);Test1::test(); PSR-0规范 [弃用] 命名空间必须与绝对路径一致 类名首字母必须大写 除了入口文件外，其他‘.php’ 必须只有一个类 SPL标准库123456789101112131415161718192021&#x2F;&#x2F;php 栈 先进后出$stack &#x3D; new SplStack();$stack-&gt;push(&#39;1&#39;);$stack-&gt;push(&#39;2&#39;);echo $stack-&gt;pop();echo $stack-&gt;pop();&#x2F;&#x2F;php 队列 先进先出$queque&#x3D; new SplQueue();$queque-&gt;enqueue(&#39;1&#39;);$queque-&gt;enqueue(&#39;2&#39;);echo $queque-&gt;dequeue();echo $queque-&gt;dequeue();&#x2F;&#x2F;php 堆 先进先出$heap&#x3D; new SplMinHeap();$heap-&gt;insert(&#39;1&#39;);$heap-&gt;insert(&#39;2&#39;);echo $heap-&gt;extract();echo $heap-&gt;extract(); 魔术方法的使用，链式操作123456789101112&#x2F;&#x2F;链式操作$db &#x3D; new Spring\\Database;$db-&gt;where([&#39;eq&#39;&#x3D;&gt;1])-&gt;limit([&#39;1&#39;])-&gt;order([&#39;id&#39;&#x3D;&gt;&#39;asc&#39;]);方法体里面直接return $this;function where($where)&#123; print_r($where); return $this;&#125;$obj-&gt;title &#x3D; &#39;aaa&#39;;&#x2F;&#x2F; function __set()&#123;&#125; function __get()&#123;&#125; 不存在的时候会调用的方法$obj-&gt;test(&#39;adsa&#39;,111); function __call()&#123;&#125;echo $obj(); function __toString(); 常见的设计模式工厂模式123456789101112131415161718* -工厂方法或者类生成对象，而不是在代码中直接new&lt;?php&#x2F;*** 工厂模式*&#x2F;namespace Spring;class Factory&#123; &#x2F;&#x2F; 多个地方同时实例化的时候，当有参数变化的时候，方便修改 static function createDatabase() &#123; $db &#x3D; new Database(); return $db; &#125;&#125;&#x2F;&#x2F;调用 不用实列话\\Spring\\Factory::createDatabase(); 单例模式 -使某个类的对象只允许创建一次，避免资源浪费 12345678910111213141516private static $instance;&#x2F;&#x2F;private 不能直接newprivate function __construct()&#123;&#125;static function getInstance()&#123; if (!(self::$instance instanceof self)) &#123; self::$instance &#x3D; new self(); &#125; return self::$instance;&#125;&#x2F;&#x2F;调用\\Spring\\Database::getInstance() 注册树模式 -全局共享和交换对象，可以用来被任何地方访问1234567891011121314151617181920212223242526272829&lt;?php&#x2F;*** 注册树模式*&#x2F;namespace Spring;class Register&#123; protected static $array; static function set($key, $value) &#123; self::$array[$key] &#x3D; $value; &#125; static function get($key) &#123; return self::$array[$key]; &#125; function _unset($key) &#123; unset(self::$array[$key]); &#125;&#125;&#x2F;&#x2F;注册 数据库全局信息 可以在任何地方使用Register::set(&#39;database&#39;, $db);&#x2F;&#x2F;调用\\Spring\\Register::get(&#39;database&#39;) 适配器模式 -可以将截然不同的函数接口封装成统一的API 如 mysql/mysqli/pdo ,redis/memcache 实现统一接口定义的方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?phpnamespace Spring\\Db;use \\Spring\\IDatabase;class MySQLi implements IDatabase&#123; function connect($host, $user, $pwd, $dbname) &#123; &#x2F;&#x2F; TODO: Implement connect() method. &#125; function query($sql) &#123; &#x2F;&#x2F; TODO: Implement query() method. &#125; function close() &#123; &#x2F;&#x2F; TODO: Implement close() method. &#125;&#125;&lt;?phpnamespace Spring\\Db;use \\Spring\\IDatabase;class MySQL implements IDatabase&#123; function connect($host, $user, $pwd, $dbname) &#123; &#x2F;&#x2F; TODO: Implement connect() method. &#125; function query($sql) &#123; &#x2F;&#x2F; TODO: Implement query() method. &#125; function close() &#123; &#x2F;&#x2F; TODO: Implement close() method. &#125;&#125;&#x2F;&#x2F;调用(new \\Spring\\Db\\MySQL())-&gt;connect(&#39;127.0.0.1&#39;,&#39;root&#39;,&#39;root&#39;,&#39;test&#39;); 策略模式 面向对象经常用到的，可以实现解耦 -将一组特定的行为和算法封装成类，以适应某些特定的上下文环境， 如 ：一个电商网站系统，针对男性女性用户跳转到不同的商品分类，展示不同的广告 ，如果新增 一种 类型，不用写很多的if else ，互不影响 只需增加一种策略即可，实现接口，依赖关系实现反转（面向对象经常用到的，可以实现解耦）1234567891011121314151617181920212223242526272829303132333435363738394041424344&#x2F;&#x2F; 传统模式if (isset($_GET[&#39;female&#39;])) &#123; $feMaleUserStrategy &#x3D; new \\Spring\\FeMaleUserStrategy(); $feMaleUserStrategy-&gt;showAd();&#125; else &#123; $maleUserStrategy &#x3D; new \\Spring\\MaleUserStrategy(); $maleUserStrategy-&gt;showAd();&#125;&#x2F;&#x2F; 策略模式interface UserStrategy&#123; function showAd();&#125;class MaleStrategy implements UserStrategy&#123; function showAd()&#123; echo &#39;男人&#39;; &#125;&#125;class FeMaleStrategy implements UserStrategy&#123; function showAd()&#123; echo &#39;女人&#39;; &#125;&#125;class IndexController&#123; protected $strategy; function index() &#123; $this-&gt;strategy-&gt;showAd(); &#125; function setStrategy(\\Spring\\UserStrategy $strategy) &#123; $this-&gt;strategy &#x3D; $strategy; &#125;&#125;$index &#x3D; new IndexController();if (isset($_GET[&#39;female&#39;])) &#123; $strategy &#x3D; new \\Spring\\FeMaleUserStrategy();&#125; else &#123; $strategy &#x3D; new \\Spring\\MaleUserStrategy();&#125;$index-&gt;setStrategy($strategy);$index-&gt;index(); 数据对象映射模式 将对象和数据存储映射起来，对一个对象的操作会银蛇为对数据存储的操作 例：实现ORM类，将复杂的SQL语句映射成对象的属性操作 结合 工厂模式，注册树模式以及数据对象映射模式（可以屏蔽数据库底层调用） 12345678910111213&#x2F;&#x2F;运用 工厂模式 注册树模式 和 数据对象映射模式public function test1()&#123; &#x2F;&#x2F;不通过 new 方式 创建 user 对象 ，而是通过 工厂模式， 静态调用 createUser ，user 对象通过注册树模式 注册 ，防止重复实列化 $user &#x3D; \\Spring\\Factory::createUser(2); $user-&gt;name &#x3D; 1; $this-&gt;test2(); var_dump($user);&#125;public function test2()&#123; $user &#x3D; \\Spring\\Factory::createUser(1); $user-&gt;name &#x3D; 2; var_dump($user);&#125; 观察者模式 当一个对象状态发生变化时，他的对象会全部收到通知，并自动更新 例子：一个事件发生后一连串更新操作，传统的方式就是在代码 加逻辑，逻辑增多 难以维护，这种方式是耦合的，增加新的逻辑需要修改事件主体的代码 ， 它实现了低耦合，非侵入式的通知与更新机制 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&#x2F;&#x2F;基础事件class Event extends \\Spring\\EventGenerator&#123; &#x2F;&#x2F;传统，模式 function trigger1()&#123; echo &quot;逻辑1&quot;; echo &quot;逻辑2&quot;; echo &quot;逻辑3&quot;; &#125; &#x2F;&#x2F;观察者模式 function trigger2()&#123; &#x2F;&#x2F;通知所有的观察者 $this-&gt;notify(); &#125;&#125;$event &#x3D; new Event();&#x2F;&#x2F;观察者1class Observer1 implements \\Spring\\Observer&#123; function update($eventInfo &#x3D; []) &#123; echo &#39;逻辑1&#39;; &#x2F;&#x2F; TODO: Implement deal() method. &#125;&#125;&#x2F;&#x2F;观察者2class Observer2 implements \\Spring\\Observer&#123; function update($eventInfo &#x3D; []) &#123; echo &#39;逻辑2&#39;; &#x2F;&#x2F; TODO: Implement deal() method. &#125;&#125;&#x2F;&#x2F;实现 观察者1 处理逻辑1$event-&gt;addObserver(new Observer1);&#x2F;&#x2F;实现 观察者2 处理逻辑2$event-&gt;addObserver(new Observer2);&#x2F;&#x2F;通知$event-&gt;trigger1();$event-&gt;trigger2();&lt;?php&#x2F;&#x2F;观察者模式namespace Spring;abstract class EventGenerator&#123; protected $observer &#x3D; []; &#x2F;&#x2F;添加观察者 function addObserver(Observer $observer) &#123; $this-&gt;observer[] &#x3D; $observer; &#125; &#x2F;&#x2F;通知 其他 观察者 function notify() &#123; foreach ($this-&gt;observer as $observer) &#123; $observer-&gt;deal(); &#125; &#125;&#125;&#x2F;&#x2F;实现接口 更新逻辑&lt;?phpnamespace Spring;interface Observer&#123; function deal($eventInfo &#x3D; []);&#125; 原型模式 与工厂模式作用类似，都是用来创建对象 与工厂模式实现不同，原型模式是先创建好一个原型对象然后通过clone 原型对象来创建新的对象，这样就避免类创建时重复初始化操作。 原型模式适用于大对象的创建，创建一个大对象需要很大的开销，如果每次NEW就会消耗很大，原型模式仅仅需要内存拷贝即可 1234567$prototype &#x3D; new Canvas();$prototype-&gt;init();$canvas1 &#x3D; clone $prototype;$canvas2 &#x3D; clone $prototype;$canvas1-&gt;dosomething();$canvas2-&gt;dosomething(); 装饰器模式 可以动态的添加，修改类的功能 一个类提供了一项功能，如果要在修改并添加额外的功能，传统的编程模式，需要写一个子类来继承他，并重新实现类的方法。 使用装饰器模式，仅仅需要在运行时添加一个装饰器对象即可实现，可以实现灵活性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?php&#x2F;&#x2F;装饰器模式namespace Spring;interface DrawDecorator&#123; function beforeDraw(); function afterDraw();&#125;class Canvas&#123; protected $decorators &#x3D; []; &#x2F;&#x2F;添加装饰器 function addDecorator(DrawDecorator $drawDecorator) &#123; $this-&gt;decorators[] &#x3D; $drawDecorator; &#125; function beforeDraw() &#123; foreach ($this-&gt;decorators as $decorator) &#123; $decorator-&gt;beforeDraw(); &#125; &#125; function afterDraw() &#123; &#x2F;&#x2F;控制反转不然，顺序不对 $decorators &#x3D; array_reverse($this-&gt;decorators); foreach ($decorators as $decorator) &#123; $decorator-&gt;afterDraw(); &#125; &#125; function draw() &#123; $this-&gt;beforeDraw(); echo &#39;画画&#39; . &quot;&quot;; $this-&gt;afterDraw(); &#125;&#125;class ColorDecorator implements \\Spring\\DrawDecorator &#123; function beforeDraw() &#123; &#x2F;&#x2F; TODO: Implement beforeDraw() method. echo &#39;beforeDrawColor&#39;; &#125; function afterDraw() &#123; echo &#39;afterDrawColor&#39;; &#x2F;&#x2F; TODO: Implement afterDraw() method. &#125;&#125;class SizeDecorator implements \\Spring\\DrawDecorator &#123; function beforeDraw() &#123; echo &#39;beforeDrawsize&#39;; &#x2F;&#x2F; TODO: Implement beforeDraw() method. &#125; function afterDraw() &#123; echo &#39;afterDrawsize&#39;; &#x2F;&#x2F; TODO: Implement afterDraw() method. &#125;&#125;$canvas &#x3D; new \\Spring\\Canvas();$canvas-&gt;addDecorator(new ColorDecorator);$canvas-&gt;addDecorator(new SizeDecorator);$canvas-&gt;draw(); 迭代器模式 在不需要了解内部实现的前提下遍历一个聚合对象的内部元素。 相比传统的编程模式，它可以隐藏遍历元素所需的操作 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phpnamespace Spring;class AllUser implements \\Iterator&#123; protected $ids; protected $data &#x3D; array(); protected $index; function __construct() &#123; $db &#x3D; Factory::createDatabase(); $result &#x3D; $db-&gt;query(&quot;select id from user&quot;); $this-&gt;ids &#x3D; $result-&gt;fetch_all(MYSQLI_ASSOC); &#125; function current() &#123; $id &#x3D; $this-&gt;ids[$this-&gt;index][&#39;id&#39;]; return Factory::getUser($id); &#125; function next() &#123; $this-&gt;index ++; &#125; function valid() &#123; return $this-&gt;index &lt; count($this-&gt;ids); &#125; function rewind() &#123; $this-&gt;index &#x3D; 0; &#125; function key() &#123; return $this-&gt;index; &#125;&#125; 代理模式 在客户端与实体置渐建立一个代理对象proxy 客户端对实体进行操作全部委派给代理对象，隐藏实体的具体实现细节 1234567891011121314151617181920212223&lt;?phpnamespace Spring;class Proxy implements IUserProxy&#123; function getUserName($id) &#123; $db &#x3D; Factory::getDatabase(&#39;slave&#39;); $db-&gt;query(&quot;select name from user where id &#x3D;$id limit 1&quot;); &#125; function setUserName($id, $name) &#123; $db &#x3D; Factory::getDatabase(&#39;master&#39;); $db-&gt;query(&quot;update user set name &#x3D; $name where id &#x3D;$id limit 1&quot;); &#125;&#125;$proxy &#x3D; new Proxy();$proxy-&gt;getUserName(1);$proxy-&gt;setUserName(1,1); 面向对象编程的基本原则 单一职责：一个类，只需要做好一件事情。 开放封闭：一个类，应该是可扩展的。而不可修改的 依赖倒置：一个类，不应该强依赖另一个类。每一个类对于另一个类都是可替换的。 配置话：尽可能地使用配置，而不是硬编码 面向接口编程：只需要关心接口，不需要关心实现 MVC结构 模型-试图-控制器，一种C/S或者B/S软件工程的组织方式 模型（model）：数据和存储的封装 视图（view）：展示层的封装 控制器（controller）：逻辑层的封装 设计模式简单的应用场景 使用装饰器模式实现权限验证，模板渲染，json串化 使用观察者模式实现数据更新事件的一系列更新操作 使用代理模式实现数据库的主从自动切换","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/tags/PHP/"},{"name":"设计模式","slug":"设计模式","permalink":"http://jas-wang.fun/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"PHP性能优化点","slug":"php","date":"2020-05-14T01:52:46.000Z","updated":"2020-07-21T09:57:38.946Z","comments":true,"path":"2020/05/14/php/","link":"","permalink":"http://jas-wang.fun/2020/05/14/php/","excerpt":"","text":"摘要对线上站点做压力测试的时候，我们一定要将请求数和并发数，特别是并发数要设置的比较低，我们不能对线上的网站造成压力问题，不管是自己的还是别人的。PHP性能问题一般不会超过占整个项目性能的50%，一般在30%~40%。 PHP 性能问题的解决方向一、语言级性能优化 指的是PHP语法基本功能，这部分优化比较简单易见、快速可行，比较快速看到效果 1.压力测试工具 Apache Benchmark (ab) ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件123456$ ./ab -n1000 -c100 http://www.baidu.com/-n ：总共的请求执行数，缺省是1；-c： 并发数，缺省是1；-t：测试所进行的总时间，秒为单位，缺省50000s-p：POST时的数据文件-w: 以HTML表的格式输出结果 参考项1234567Failed requests: 0 &#x2F;&#x2F;失败的请求数量。因网络原因或服务器性能原因，发起的请求并不一定全部成功，通过该数值和Complete requests相除可以计算请求的失败率，作为测试结果的重要参考。Total transferred: 103314 bytes&#x2F;&#x2F;总共传输的数据量，指的是ab从被测服务器接收到的总数据量，包括index.html的文本内容和请求头信息。HTML transferred: 22700 bytes &#x2F;&#x2F;从服务器接收到的index.html文件的总大小，等于Document Length＊Complete requests＝227 bytes＊100＝22700 bytesRequests per second: 91.50 [#&#x2F;sec] (mean) &#x2F;&#x2F;平均(mean)每秒完成的请求数：QPS，这是一个平均值，等于Complete requests&#x2F;Time taken for tests&#x3D;100&#x2F;1.093&#x3D;91.50Time per request: 109.287 [ms] (mean) &#x2F;&#x2F;从用户角度看，完成一个请求所需要的时间（因用户数量不止一个，服务器完成10个请求，平均每个用户才接收到一个完整的返回，所以该值是下一项数值的10倍。）Time per request: 10.929 [ms] (mean, across all concurrent requests)&#x2F;&#x2F; 服务器完成一个请求的时间。Transfer rate: 92.32 [Kbytes&#x2F;sec] received&#x2F;&#x2F;网络传输速度。对于大文件的请求测试，这个值很容易成为系统瓶颈所在。要确定该值是不是瓶颈，需要了解客户端和被测服务器之间的网络情况，包括网络带宽和网卡速度等信息。 2.PHP 自身能力少写代码，多用 PHP 自身能力 自身代码冗余较多，可读性不佳，并且性能低。为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。多使用 PHP 内置变量、常量、函数。 PHP 代码运行流程 php文件 -&gt; zend引擎 -&gt; [Parser] -&gt; Opcodes(要被执行的代码,目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。) -&gt; [Exec] =&gt; Output PHP 内置函数之间的性能测试 12array_key_exists() 和 isset()php 执行效率上： isset &gt; array_key_exists 当数组个数为10时，两者差异就体现出来了，isset 速度要快近10倍，但不是很明显，而且对于变量是否存在，两者之间的差异没有太大，当变量存在时运行更快，但是这种趋势在是非常微弱的。 使用 array_key_exists 随着循环的次数增加，程序运行的时间增加量是成几何级数增加的，当一个数组元素个数超过1000时运行速度就非常慢了。 由于 isset 属于 php 中的语言结构，而 array_key_exists 是函数，所以 isset 更快。 3.减少 PHP 魔法函数的使用PHP自身提供的魔法函数，性能并不是很好 ,是为了给 PHP 程序员省事，PHP 语言为你做了很多，所以尽量减少魔法函数的使用。 4.Linux time命令-可以查看PHP文件的执行耗时1234[root@localhost wwwroot]# time php index.phpreal 0m0.070suser 0m0.050s (关注这个)sys 0m0.020s 在上面运行的结果中，我们只关注user的那一行时间，关于这三个时间的解释，可以参考下面的解释： real 时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。 user 时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。 sys 时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。 5.错误抑制符 @@的实际逻辑：在代码开始前、结束后，增加 Opcode，忽略报错性能测试 123456789101112131415&#x2F;&#x2F;at.phpfile_get_contens(&#39;xxx&#39;); &#x2F;&#x2F; 直接获取一个不存在文件的内容，此时会报错方便查看执行过程我们可以使用 vld 扩展执行at.php，查看执行过程的完整 Opcodephp -dvld.active&#x3D;1 -dvld.execute&#x3D;0 at.php# 不加@错误抑制符时Opcode的执行情况SEND_VALDO_FCALLRETURN# 加@错误抑制符时Opcode的执行情况BEGIN_SILENCESEND_VALDO_FCALLEND_SILENCERETURN 建议：可以使用 try throw 方式进行错误控制 6.合理使用内存PHP 有内存回收机制保底，但也要小心使用内存 利用 unset()及时释放不使用的内存 7.避免在循环内做运算1234567891011121314优化前$str &#x3D; &quot;hello world&quot;;for ($i&#x3D;0; $i &lt; strlen($str); $i++) &#123; # code...&#125;&#x2F;&#x2F; 其中strlen()方法会在每次循环时计算一次&#x2F;&#x2F; 进行优化$str &#x3D; &quot;hello world&quot;;$strlen &#x3D; strlen($str);for ($i&#x3D;0; $i &lt; $strlen; $i++) &#123; # code...&#125; 8.务必适用带引号字符串做键值PHP 会将没有引号的键值当做常量，产生查找常量的开销 12345678define(&#39;key&#39;, &#39;test&#39;);$array &#x3D; array( &#39;key&#39; &#x3D;&gt; &#39;1&#39;, &#39;test&#39; &#x3D;&gt; &#39;2&#39;);echo $array[&quot;key&quot;] . &#39;\\n&#39;; &#x2F;&#x2F; 输出 1echo $array[key] . &#39;\\n&#39;; &#x2F;&#x2F; 输出 2 当时用$array[key]时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析 二、PHP 周边环境影响1.运行环境 Linux运行环境 文件存储 （读写磁盘，数据库，内存，网络数据） 数据库 缓存 【内存，PHP缓存技术，redis】 网络 优化方向 123456-读写内存 &lt;&lt;(远小于) 读写数据库[基于文件系统，操作本地磁盘] &lt;(小于) 读写磁盘 &lt; 读写网络数据-数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 &#x3D;&gt; 数据库介于内存和磁盘之间-网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响， 延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。 建议：尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。 2.优化网络请求(1).网络请求的坑：对方接口的不确定因素 ,网络的稳定性(2).如何优化网络请求？ 设置超时时间：（连接超时，读超时，写超时） 将串行请求并行化：使用 curlmulti*() =&gt; 最简单，但是并不是最好用；使用 swoole 扩展 =&gt; 效果更好curl_multi实现并发列子 3.开启PHP慢日志查询 找到php-fpm.conf文件 去掉request_slowlog_timeout前面的分号，并设置时间。如：request_slowlog_timeout=5表示超过5秒的 慢日志文件位置默认在php的安装目录下的log文件夹中，可以通过修改slowlog = log/$pool.log.slow参数来指定。 php-fpm慢日志的例子，慢日志会记录下进程号，脚本名称，具体哪个文件哪行代码的哪个函数执行时间过长。 request_slowlog_timeout 和 slowlog需要同时设置，开启request_slowlog_timeout的同时需要开启 slowlog 慢日志路径需要手动创建 (slowlog) 4.借助 xhprof 工具分析 PHP 性能php-性能分析工具-xhprof 三、 PHP 性能瓶颈终极办法1.APC (Alternative PHP Cache) 是一款开源的php插件,用来对php的代码或者用户数据进行缓存。 apc可以去掉php动态解析以及编译的时间，php脚本可以执行的更快。 PHP是一个动态脚本语言，所以为了让用户在浏览器中看到页面内容，服务器必须解析php代码从而生成想用的html代码。从上面的图中可以看出，在没有apc的时候，用户对php页面的每一次请求，服务器都需要进行对php进行解析，编译以及执行，但是很多时候，只要php代码没有发生更改，php的执行逻辑就不会改变，也就是说解析以及编译的过程就可以省略，直接执行然后将结果返回即可。这就是apc的工作，apc缓存php的可执行代码，从而去掉了解析以及编译的过程，加快了php脚本的执行速度。 缓存数据量小，大的话建议redis或者memcache 这里有一个简单的例子对比redis 和 apc 123456789101112131415161718192021222324252627function getTimeStamp() &#123; $timestr &#x3D; microtime(); $timestrary &#x3D; explode(&#39; &#39;, $timestr); $result &#x3D; intval($timestrary[1])*1000 + intval(floatval($timestrary[0])*1000); return $result; &#125; $redis &#x3D; new Redis(); $redis-&gt;connect(&#39;127.0.0.1&#39;, 6379); $key &#x3D; &#39;key&#39;; $value &#x3D;&#39;value&#39;; $redis-&gt;set($key, $value); apc_store($key, $value, 1); $begin &#x3D; getTimeStamp(); for($i &#x3D; 0 ; $i &lt; 100000 ; $i &#x3D; $i +1) &#123; $result &#x3D; apc_fetch($key); &#125; $cost &#x3D; getTimeStamp() - $begin; var_dump($cost); $begin &#x3D; getTimeStamp(); for($i &#x3D; 0 ; $i &lt; 100000 ; $i &#x3D; $i +1) &#123; $result &#x3D; $redis-&gt;get($key); &#125; $cost &#x3D; getTimeStamp() - $begin; var_dump($cost); $redis-&gt;close(); 都是简单的取数据操作，分别进行10万次，单位是毫秒。最后的运行结果redis10万次读在4-5秒之间，而apc得10万次读只有50毫秒左右。可以看到如果是简单的缓存一些数据，并且这些数据不会变化且命中的话，apc还是能带来一定的效率提升的。 apc php.ini 配置参数 1234567extension&#x3D; apc.so &#x2F;&#x2F;添加扩展apc.enabled&#x3D;1 &#x2F;&#x2F;开启apcapc.shm_segments&#x3D;1 apc.shm_size&#x3D;64M ; apc内存的大小,最后的大小需要乘上segments的数量，所以这里一共为apc分配64M apc.ttl&#x3D;7200 apc.user_ttl&#x3D;7200 apc.enable_cli&#x3D;1 ; 这个如果不开启，则只可以在网页上进行apc操作，不能通过cli进行apc操作","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/tags/PHP/"},{"name":"性能优化","slug":"性能优化","permalink":"http://jas-wang.fun/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]},{"title":"PHP性能分析工具——xhprof","slug":"php-xhprof","date":"2020-03-20T01:52:46.000Z","updated":"2020-07-21T09:57:48.897Z","comments":true,"path":"2020/03/20/php-xhprof/","link":"","permalink":"http://jas-wang.fun/2020/03/20/php-xhprof/","excerpt":"","text":"简介XHProf是一个分层PHP性能分析工具。它报告函数级别的请求次数和各种指标，包括阻塞时间，CPU时间和内存使用情况。Xhprof是facebook开源出来的一个php轻量级的性能分析工具，跟Xdebug类似，但性能开销更低，还可以用在生产环境中，也可以由程序开关来控制是否进行profile。 什么时候应该进行性能分析？在考虑是否进行性能分析时，你首先要想：应用是否存在性能问题？如果有，你要进一步考虑：这个问题有多大？如果你不这样做，将会陷入一个陷阱——过早优化，这可能会浪费你的时间。为了评断应用是否存在性能问题，你应该确定性能目标。例如，100 个并发用户的响应时间小于 1s 。然后，你需要进行基准测试，看是否达到这个目标。一个常见的错误是，在开发环境进行基准测试。事实上，你必须在生产环境进行基准测试。 XHProf + XHGuiXHProf 由 Facebook 开发的，包含一个基本的用户界面用于查看性能数据。此外，Paul Reinheimer 开发了 XHGui 和一个增强的用户界面（UI）用于查看、比较和分析性能数据。 安装1234567891.pecl 安装pecl install xhprof 安装完成直接重启php $ php -m | grep xhprofxhprof2.源码安装wget http:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;xhprof-0.9.4.tgztar -zxvf xhprof-0.9.4.tgz &amp;&amp; cd xhprof-0.9.4.tgzphpize &amp;&amp; .&#x2F;configure &amp;&amp; make &amp;&amp; make install 一旦你编译了该扩展程序，您必须启用它。为此，您需要在 php.ini 文件添加以下代码： 123[xhprof]extension &#x3D; xhprof.so xhprof.output_dir &#x3D; &#x2F;var&#x2F;www&#x2F;html&#x2F;php-run-tmp&#x2F; 定义输出文件的存放位置 完成后重启php具体文档可以查看官方文档地址 ：https://www.php.net/xhprof 例子 123456789101112131415161718192021$XHPROF_ROOT &#x3D; realpath(dirname(__FILE__) .&#39;&#x2F;..&#39;);include_once $XHPROF_ROOT . &quot;&#x2F;xhprof_lib&#x2F;utils&#x2F;xhprof_lib.php&quot;;include_once $XHPROF_ROOT . &quot;&#x2F;xhprof_lib&#x2F;utils&#x2F;xhprof_runs.php&quot;;&#x2F;&#x2F;开启xhprofxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);&#x2F;&#x2F;注册一个函数，当程序执行结束的时候去执行它。register_shutdown_function(function() &#123; &#x2F;&#x2F;stop profiler $xhprof_data &#x3D; xhprof_disable(); &#x2F;&#x2F;冲刷(flush)所有响应的数据给客户端 if (function_exists(&#39;fastcgi_finish_request&#39;)) &#123; fastcgi_finish_request(); &#125; $xhprof_runs &#x3D; new XHProfRuns_Default(); &#x2F;&#x2F;save the run under a namespace &quot;xhprof_foo&quot; $run_id &#x3D; $xhprof_runs-&gt;save_run($xhprof_data, &quot;xhprof_foo&quot;);&#125;); 运行框架 查看 目录下生成了很多文件 123cd var&#x2F;www&#x2F;html&#x2F;php-run-tmp&#x2F; &amp;&amp; ll $ 5f1556ce4197a.xhprof.xhprof 5f1558bc70a6c.xhprof.xhprof 配置nginx 站点访问目录 1234567891011121314server &#123; listen 80; server_name localhost; root &#x2F;xhprof&#x2F;xhprof_html; index index.html index.php; location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 到此结束，浏览器输入localhost 地址访问 默认的UI里列出了： funciton name ： 函数名 calls: 调用次数 Incl. Wall Time (microsec)： 函数运行时间（包括子函数） IWall%：函数运行时间（包括子函数）占比 Excl. Wall Time(microsec)：函数运行时间（不包括子函数） EWall%：函数运行时间（不包括子函数） 在web中还可以看到 [View Full Callgraph] 链接，点击后可以绘制出一张可视化的性能分析图，如果点击后报错的话，可能是缺少依赖graphviz。graphviz是一个绘制图形的工具，可以更为直观的让你查看性能的瓶颈。如果需要可以安装： 1apt-get install graphviz 就可以看到 绘制的图标！","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/tags/PHP/"},{"name":"工具","slug":"工具","permalink":"http://jas-wang.fun/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"MySQL性能优化-数据库结构优化","slug":"mysql-strcut","date":"2019-07-21T02:00:46.000Z","updated":"2020-07-21T05:42:27.984Z","comments":true,"path":"2019/07/21/mysql-strcut/","link":"","permalink":"http://jas-wang.fun/2019/07/21/mysql-strcut/","excerpt":"","text":"摘要 Mysql性能优化就算通过合理安排资源，调整系统参数使MYSQL运行更快，更节省资源。MYSQL性能优化包括查询速度优化，更新速度优化，mysql服务器优化等等。此处，介绍以下几个优化。包含，性能优化的介绍，查询优化，数据库结构优化，mysql服务器优化。 Mysql优化，一方面是找出系统的瓶颈，提高mysql数据库整体的性能，另外一个方面需要合理的结构设计和参数调整，以提高用户操作响应的速度。同时还要尽可能节省系统资源，以便系统可以提供更大负荷的服务。mysql数据库优化是多方面的，原则是减少系统的瓶颈，减少资源的占用，增加系统反应的速度 选择合适的数据类型 数据类型的选择，重点在于合适二字，如何确定选择的数据类型是否合适？ 使用可以存下你的数据的最小的数据类型 使用简单的数据类型。int要比varchar类型在mysql处理上简单 尽可能的使用not null定义字段 尽可能的少用text类型，非用不可的时候可以考虑分表 int 类型存储时间戳，可以用 FROM_UNIXTIME(time) 转换 biginit存储IP地址 INET_ATON() 存储,INET_NTOA()读取 表的范式化和反范式化 范式化是指数据库设计的规范，目前说到的范式化一般值第三设计范式，也就是要求数据表中不存在非关键字段对任意候选关键字段的传递函数依赖则符合第三范式存在以下传递函数依赖关系： （商品名称）-&gt;（分类）-&gt;（分类描述）也就是说存在非关键字段“分类描述”对关键字段”商品名称“的传递函数依赖 会出现异常比如我把删除商品数据最后会把分类信息也会删除调 反范式化是指为了查询效率的考虑把原本符合第三范式的表适当添加冗余，以达到优化查询效率的目的，反范式是一种一空间换时间的操作 数据库的拆分过程基本遵循的顺序是：垂直拆分、读写分离、水平拆分(也称之为分库分表)。垂直拆分1、什么是垂直拆分？指的是将一个包含了很多表的数据库,根据表的功能的不同,拆分为多个小的数据库,每个库中包含部分表。 比如：电商系统采用的库为db_eshop,根据用户功能和产品功能,可以拆分为用户库db_user和产品库db_product。所谓垂直拆分，就是把原来一个有多列的表拆分成多个表，这解决了表的宽度问题，通常垂直拆分可以按照下面原则： 通常把不常用的字段单独存放到一个表中。 把大字段独立存到一个表中 把经常使用的字段放到一起 2、什么时候使用垂直拆分？刚开始,可能公司的技术团队规模比较小,所有的数据都存放在一个库中。 随着公司业务的发展,技术团队人员扩张,划分为不同的技术小组,不同的小组负责不同的业务模块。 如：A小组负责用户模块,B小组负责产品模块。此时可以将数据库进行垂直拆分。 3、垂直拆分的好处？ 垂直拆分会使得单个用户请求的响应时间变长,但是会使得整个服务的吞吐量大大的增加。（服务吞吐量即系统在单位时间内处理请求的数量） 使得单个用户请求的响应时间变长的原因在于：在单体应用场景下,所有的业务都在一个节点内部完成,而垂直拆分后,通常会需要进行rpc调用,rpc的调用会加长单个用户请求的响应时间。 4、垂直拆分的另外2种用途？ 将一个包含了很多字段的大表拆分为多个小表,每个表中包含部分字段(基本很少遇到) 进行服务化(SOA)的改造,除了业务上需要进行拆分,底层的存储也需要进行隔离 二、读写分离1、什么是读写分离？ 将数据库分为主库和从库,一个主库用于写数据,多个从库完成读数据的操作。 主从库通过某种机制进行数据的同步。 2、为什么需要使用读写分离？随着业务的不断发展,用户数量和并发量不断上升,此时如果仅靠单个数据库实例来支撑所有的访问压力,数据库将难以支撑。 比如：产品库中,包含了几万种产品数据,并且每天新增几十条产品数据,而产品库每天的访问可能有几亿甚至几十亿次,数据库读的压力太大,单台mysql实例扛不住。此时可以将数据库进行读写分离,主库负责数据写的操作,多个从库负责数据读的操作。 注：说白了,读写分离是为了解决数据库读的操作。 3、数据库进行了读写分离配置后,开发人员需要做哪些事情？DBA将mysql配置成主从复制,开发人员需要做如下事情： 更新数据库数据时,应用将数据写入到master主库 主库将数据同步给多个slave从库 当查询数据时,应用选择某一个slave节点读取数据。 4、读写分离的优点？通过配置多个从库,可以有效的避免过大的访问量对单个库造成的压力。 5、读写分离技术所面临的问题有哪些？ 读写分离的基本操作,是对sql类型进行判断,如果是select等读的请求,就走从库. 如果是insert、update、delete等写的请求,就走主库。 主从数据同步延迟的问题解决办法：因为数据是从主节点通过网络同步给多个从 节点的,因此必然存在延迟问题。 因此可能出现如下问题：我们在主节点中插入了数据,但是从节点却读取不到数据的问题。 对于一些强一致性的业务场景,要求插入数据后必须能读取到,对于这种情况,我们需要提供一种方式,让读的请求也可以走主库,而主库上的数据必然是最新的。 事务问题解决办法： 如果一个事务中同时包含了读的请求和写的请求,如果读的请求走从库,写的请求走主库。由于跨了多个库,那么本地事务已经无法控制。 而分布式事务非常复杂且效率较低,因此读写分离,目前主流的做法是：将事务中所有sql统一走主库,由于只涉及到一个库,本地事务可以解决。 综上所述： 垂直拆分可以解决服务吞吐量即提高系统在单位时间内处理请求的数量 读写分离可以缓解单库的压力,增强用户并发访问量 即经过垂直拆分和主从同步的数据库完全可以承受住难以想象的高并发访问操作。 三、水平拆分1、什么是水平拆分（分表分库）？通过一种算法,将数据库进行分割的架构。每个分片中的数据没有重合,所有分片中的数据并集组成全部数据。 水平分表实际又可以分为如下三种：只分表、只分库、分库分表 只分表：将db库中的user表拆分为2个分表,即uer_0和user_1 只分库：将db库拆分为db_0和db_1这2个库,同时在db_0和db_1库中各自新建一个user表,db_0.user表和db_1.user表中各自只存放原来的db.user表中的部分数据 分库分表：将db库拆分为db_0和db_1这2个库,db_0中包含user_0、user_1这2个分表,db_1中包含user_2、user_3这2个分表。 2、为什么需要进行分表分库？一旦业务表中的数据量比较大,从维护和性能的角度来看,仍然无法掩盖因为数据量过大从而导致数据库性能下降的事实。因此,这个时候mysql DBA就该对数据库进行水平分区,经过水平分区设置后的业务表,必然能够将原本一张表维护的海量数据分配给N个子表进行存储和维护。 即：单库容量最容易成为性能瓶颈,当单库容量成为瓶颈,我们希望提高数据库的写的性能,降低单库容量的话,就可以使用水平切分。 3、分表分库的使用场景？如果库中的多个表中只有某张表或者少量表数据量过大,那么只需要针对这些表进行拆分,其它表保持不变。 4、分库分表的好处？如果说读写分离实现数据库读能力的水平提升 那么,分库分表是是吸纳数据库写能力的水平提升 存储能力的水平扩展 在读写分离的情况下,每个集群中的主从库基本上数据时完全一致的,从存储能力上讲在存储海量数据的情况下,可能由于磁盘空间的限制,无法存储所有的数据。而分库分表的情况下,我们可以搭建多个mysql主从复制集群,每个集群只存储部分分片的额数据,实现了存储能力的水平扩展。 写能力的水平扩展 在读写分离的情况下,由于每个集群只有一个master,所有的写操作的压力都集中在这一个节点上,在写入并发非常高的情况下,这将会成为整个系统的瓶颈。而在分表分库的情况下,每个分片所属的集群都有一个master节点,都可以执行写入的操作,实现写能力的水平扩展,此外减小建立索引开销,降低写操作的锁操作耗时等,都会带来很多显著的好处。 5、分库分表的问题主要体现在如下4个方面：基本数据的增删改功能、分布式id、分布式事务、动态扩容 基本的数据库增删改功能 对于开发人员而言,虽然分库分表的,但是其还是希望能和单库单表那样去操作数据库。 如：我们要批量插入4条记录,并且希望根据用户的id字段,确定这条记录插入哪个库的那张表中。如：1号记录插入user1表….4号记录插入user4表 那么之前的单库作如下： 1insert into user(id,name) values (1,”tianshouzhi”),(2,”huhuamin”), (3,”wanghanao”),(4,”luyang”) 这显然无法实现,因为我们已经对库和表进行了拆分,这种sql语法只能操作mysql的单个库和单个表,所以必须将sql改为4条,然后分表到每个库上去执行,如下： 1234567insert into user0(id,name) values (4,”luyang”)insert into user1(id,name) values (1,”tianshouzhi”)insert into user2(id,name) values (2,”huhuamin”)insert into user3(id,name) values (3,”wanghanao”) 分布式id 在分库分表后,我们不能再使用mysql的自增主键。 因为在插入记录的时候,不同的库生成的记录的自增id可能会出现冲突 因此,需要一个全局的id生成器,目前分布式id有很多种方案,其中一个比较轻量级的方案是twitter的snowflake算法。 分布式事务分布式事务是分库分表的绕不过去的一个坎,因为涉及到了同时更新多个分片数据。 如：批量插入记录到四个不同的库,如何保证要么同时成功,要么同时失败。 关于分布式事务,mysql支持XA事务,但是效率较低。 柔性事务是目前比较主流的方案,柔性事务包括：最大努力通知型、可靠消息最终一致性方案以及TCC两个阶段提交。 但是无论XA事务还是柔性事务,实现起来都是非常复杂的。 动态扩容动态扩容是指只增加分库分表的数量 如：将原来user表拆分到2个库的四张表上。 现在我们希望将分库的数量变为4个,分表的数量变为8个。 这种情况一般要伴随着数据迁移,如在4张表的情况下,id为7的记录,7%4=3 因此这条记录位于user3这张表上,但是现在分表的数量变为8个,而7%8=0 而user0这张表根本没有id=7这条记录,因此如果不进行数据迁移的话,就会出现记录找不到的情况。 问题：分库分表之后如何实现联合查询？可以使用第三方中间件来实现，比如：mycat、shading-jdbc原理解析： 123当客户端发送一条sql查询：select * from user;此时中间件会根据有几个子表，拆分成多个语句：select * from user1;select * from user2;select * from user3等多条语句查询，然后将查询的结果返回给中间件，然后汇总给客户端。这些语句是并发执行的，所以效率会很高哦。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/tags/MySQL/"},{"name":"性能优化","slug":"性能优化","permalink":"http://jas-wang.fun/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"数据库结构优化","slug":"数据库结构优化","permalink":"http://jas-wang.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E4%BC%98%E5%8C%96/"}]},{"title":"MySQL性能优化-索引优化","slug":"mysql-index","date":"2018-08-21T01:00:46.000Z","updated":"2020-07-21T05:42:58.303Z","comments":true,"path":"2018/08/21/mysql-index/","link":"","permalink":"http://jas-wang.fun/2018/08/21/mysql-index/","excerpt":"","text":"摘要 Mysql性能优化就算通过合理安排资源，调整系统参数使MYSQL运行更快，更节省资源。MYSQL性能优化包括查询速度优化，更新速度优化，mysql服务器优化等等。此处，介绍以下几个优化。包含，性能优化的介绍，查询优化，数据库结构优化，mysql服务器优化。 Mysql优化，一方面是找出系统的瓶颈，提高mysql数据库整体的性能，另外一个方面需要合理的结构设计和参数调整，以提高用户操作响应的速度。同时还要尽可能节省系统资源，以便系统可以提供更大负荷的服务。mysql数据库优化是多方面的，原则是减少系统的瓶颈，减少资源的占用，增加系统反应的速度。 SQL以及索引优化 如何发现有问题的sql？ 使用MYSQL慢查日志对有效率问题的SQL进行监控12345SHOW VARIABLES LIKE &#39;%log%&#39;;SET GLOBAL slow_query_log &#x3D; ON;&#x2F;&#x2F;开启慢查询日志SHOW VARIABLES LIKE &#39;%slow_query_log%&#39;;SET GLOBAL log_queries_not_using_indexes&#x3D;On; &#x2F;&#x2F;是否记录索引 默认falseSET GLOBAL long_query_time &#x3D; 1;&#x2F;&#x2F;长查询 慢查询日志分析工具-mysqldumpslow1mysqldumpslow -t 3 &#x2F;home&#x2F;mysql-slow.log EXPLAIN简介 使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。 通过explain我们可以获得以下信息： 表的读取顺序 数据读取操作的操作类型 哪些索引可以使用 哪些索引被实际使用 表之间的引用 每张表有多少行被优化器查询 使用explain查询SQL的执行计划 如何分析SQL查询explain返回各列的含义 table:显示这一行的数据是关于哪张表的 type:这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const:常量查找 （比如id=1），eq_reg（范围查找），ref（连接查询），range（基于索引范围查找 如id&gt;1）,index（索引扫描）all（表扫描） possible_keys:显示可能应用在这张表中的索引。如果为空，没有可能 的索引。 key:实际使用的索引。如果为null，则没有使用索引。 ken_len：使用的所有长度。在不损失精确性的情况下，长度越短越好(因为mysql每次读取都是以列为单位的，所以索引的数量越大查询效率越慢) ref:显示索引的哪一列被使用了，如果可能的话是一个常数 rows:返回请求的数据的行数 extra列需要注意返回值 Using filesort ：看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。他根据连接类型以及存储排序键值和匹配条件的全部行指针来排序全部行 Using temporary：查询需要优化。这里mysql需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY.,GROUP BY 上 执行计划各字段详细含义 id id相同，执行顺序由上至下 id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行(比如子查询) id相同不同，同时存在 id相同的可以认为是一组，同一组中从上往下执行，所有组中id大的优先执行 type所显示的是查询使用了哪种类型，type包含的类型包括如下图所示的几种，从好到差依次是 123456789101112-- system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all-- system 表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计-- const 表示通过索引一次就找到了，const用于比较primary key 或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。 -- eq_ref 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描-- ref 非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。-- range 只检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引，一般就是在你的where语句中出现between、&lt; 、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。-- index Full Index Scan，Index与All区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和Index都是读全表，但index是从索引中读取的，而all是从硬盘读取的） -- all Full Table Scan 将遍历全表以找到匹配的行 possible_keys 和 keypossible_keys 显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。key实际使用的索引，如果为NULL，则没有使用索引。（可能原因包括没有建立索引或索引失效） key_len表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。 rows根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，也就是说，用的越少越好 Extra 123456789-- Using filesort说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”。-- Using temporary使用了用临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。 -- Using index表示相应的select操作中使用了覆盖索引（Covering Index），避免访问了表的数据行，效率不错。如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。-- Using join buffer表明使用了连接缓存,比如说在查询的时候，多表join的次数非常多，那么将配置文件中的缓冲区的join buffer调大一些。 索引不足之处 索引提高了查询的速度，但是降低了INSERT、UPDATE、DELETE的速度，因为在插入、修改、删除数据时，还要同时操作一下索引文件； 建立索引未见会占用一定的磁盘空间。 索引简介 数据库的索引就像一本书的目录，能够加快数据库的查询速度。 MYSQL索引有四种PRIMARY、INDEX、UNIQUE、FULLTEXT， 其中PRIMARY、INDEX、UNIQUE是一类，FULLTEXT是一类。 这四种都是单列索引，也就是他们都是作用于单个一列，所以也称单列索引；但是所以一个索引也可以作用于多个列上，称为组合索引或复合索引 例子主键索引 12345678*RIMARY：主键索引。索引列唯一且不能为空；一张表只能有一个主键索引（主键索引通常在建表的时候就指定）CREATE TABLE T_USER(ID INT NOT NULL,USERNAME VARCHAR(16) NOT NULL,PRIMARY KEY(ID))*NORMAL：普通。索引列没有任何限制CREATE TABLE T_USER(ID INT NOT NULL,USERNAME VARCHAR(16) NOT NULL,INDEX USERNAME_INDEX(USERNAME(16))) * ALTER语句指定ALTER TABLE T_USER ADD INDEX U_INDEX (USERNAME) &#x2F;&#x2F;给列USERNAME建普通索引 U_INDEX* 删除索引DROP INDEX U_INDEX ON t_user &#x2F;&#x2F;删除表t_user中的索引U_INDEX 唯一索引 1234567UNIQUE：唯一索引。索引列的值必须是唯一的，但允许有空；* 建表时指定CREATE TABLE t_user(ID INT NOT NULL,USERNAME VARCHAR(16) NOT NULL,UNIQUE U_INDEX(USERNAME)) &#x2F;&#x2F;给列USERNAME添加唯一索引T_USER* ALTER语句指定ALTER TABLE t_user ADD UNIQUE u_index(USERNAME) &#x2F;&#x2F;给列T_USER添加唯一索引u_index* 删除索引DROP INDEX U_INDEX ON t_user 全文索引 12FULLTEXT：全文搜索的索引。FULLTEXT 用于搜索很长一篇文章的时候，效果最好。用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。索引的新建和删除和上面一致，这里不再列举... 组合索引（复合索引） 1234567新建一张表CREATE TABLE T_USER(ID INT NOT NULL,USERNAME VARCHAR(16) NOT NULL,CITY VARCHAR(10),PHONE VARCHAR(10),PRIMARY KEY(ID) )组合索引就是把多个列加入到统一个索引中，如新建的表T_USER，我们给USERNAME+CITY+PHONE创建一个组合索引ALTER TABLE t_user ADD INDEX name_city_phone(USERNAME,CITY,PHONE) &#x2F;&#x2F;组合普通索引ALTER TABLE t_user ADD UNIQUE name_city_phone(USERNAME,CITY,PHONE) &#x2F;&#x2F;组合唯一索引 这样的组合索引，其实相当于分别建立了（USERANME,CITY,PHONE USERNAME,CITY USERNAME,PHONE）三个索引。为什么没有（CITY,PHONE）索引呢？这是因为MYSQL组合查询“最左前缀”的结果。简单的理解就是只从最左边开始组合。并不是查询语句包含这三列就会用到该组合索引： 123456789这样的查询语句才会用到创建的组合索引SELECT * FROM t_user where USERNAME&#x3D;&quot;parry&quot; and CITY&#x3D;&quot;广州&quot; and PHONE&#x3D;&quot;180&quot;SELECT * FROM t_user where USERNAME&#x3D;&quot;parry&quot; and CITY&#x3D;&quot;广州&quot;SELECT * FROM t_user where USERNAME&#x3D;&quot;parry&quot; and PHONE&#x3D;&quot;180&quot;这样的查询语句是不会用到创建的组合索引 SELECT * FROM t_user where CITY&#x3D;&quot;广州&quot; and PHONE&#x3D;&quot;180&quot;SELECT * FROM t_user where CITY&#x3D;&quot;广州&quot;SELECT * FROM t_user where PHONE&#x3D;&quot;180&quot; 索引使用注意事项 只要列中包含NULL值将不会被包含在索引中，组合索引只要有一列含有NULL值，那么这一列对于组合索引就是无效的，所以我们在设计数据库的时候最好不要让字段的默认值为NULL; 使用短索引 如果可能应该给索引指定一个长度，例如：一个VARCHAR(255)的列，但真实储存的数据只有20位的话，在创建索引时应指定索引的长度为20，而不是默认不写。如下 ALTER TABLE t_user add INDEX U_INDEX(USERNAME(16)) 优于 ALTER TABLE t_user add INDEX U_INDEX(USERNAME) 使用短索引不仅能够提高查询速度，而且能节省磁盘操作以及I/O操作。 索引列排序 Mysql在查询的时候只会使用一个索引，因此如果where子句已经使用了索引的话，那么order by中的列是不会使用索引的，所以order by尽量不要包含多个列的排序，如果非要多列排序，最好使用组合索引。 Like 语句 一般情况下不是鼓励使用like,如果非使用，那么需要注意 like”%aaa%”不会使用索引；但like“aaa%”会使用索引。 不使用 NOT IN和&lt;&gt;操作 索引方式 HASH和 BTREE比较 12 HASH : 用于对等比较，如&quot;&#x3D;&quot;和&quot; &lt;&#x3D;&gt;&quot; BTREE: BTREE索引看名字就知道索引以树形结构存储，通常用在像 &quot;&#x3D;，&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;、BETWEEN、Like&quot;等操作符查询效率较高； 通过比较发现，我们常用的是BTREE索引方式，当然Mysql默认就是BTREE方式。 COUNT 和 MAX优化 max ：select max(update_time) from ps_table ; 会全表扫描，直接 将 update_time 设置索引 count : count(id)和count() 可能统计数量有差别 ，count（） 包含null 的数量 子查询优化 通常情况下，需要把子查询优化为join 查询，优化时需要注意一对多关系，要注意重复数据（可以使用 distinct 优化） Group By 优化1234567优化前：EXPLAIN SELECT a.first_name,a.last_name, COUNT(*) FROM film_actor fa INNER JOIN actor a USING (actor_id)GROUP BY fa.actor_id;优化后：EXPLAIN SELECT a.first_name, a.last_name, COUNT(*) FROM actor a INNER JOIN film_actor fa USING (actor_id)GROUP BY a.actor_id; LIMIT 查询优化 LIMIT常常用于分页处理，时常会伴随order by 从句使用，因此大多时候会使用filesort文件排序的方式，这样会造成大量IO问题 情况1：由于title 排序字段没有建立索引，所以排序使用了文件排序 造成大量io 1EXPLAIN SELECT film_id,description from film ORDER BY title LIMIT 50,5; 情况2：排序字段加上 film_id 使用了索引，但是当数据量大（分页越到后面）的时候 也会扫描大量数据 1EXPLAIN SELECT film_id,description from film ORDER BY film_id LIMIT 50,5; 情况3：使用范围 where （主键必须顺序增长）或者建立一个索引自增的列保持自增 1EXPLAIN SELECT film_id,description from film WHERE film_id &gt; 55 AND film_id &lt; 60 ORDER BY film_id LIMIT 1,5; 优化思路：避免查询过多数据 如何选择合适的列建立索引 在where从句，group by 从句 order by 从句，on 从句出现的列 索引字段越小越好 （数据库中数据存储单位是列为单位的，数据量存储越大 io消耗越高） 离散度大的列放到联合索引的前面（唯一值越多，可选择性越多）12select * from payment where staff_id &#x3D; 2 and customer_id&#x3D;584;SELECT COUNT(DISTINCT customer_id),COUNT(DISTINCT staff_id) from payment; 问：应该建立 index(staff_id,customer_id) 还是 index(customer_id,stuff_id) 好 ？答：由于 customer_id 唯一值 越多，可选择性越多 所以放在最前面 customer_id 的离散度更大，所以应该使用 index(customer_id,stuff_id) 索引优化SQL方法查询数据库冗余索引 12345678SELECT a.TABLE_SCHEMA, a.INDEX_NAME, b.INDEX_NAME, a.COLUMN_NAMEFROM STATISTICS aJOIN STATISTICS b ON a.TABLE_SCHEMA &#x3D; b.TABLE_SCHEMAAND a.TABLE_NAME &#x3D; b.TABLE_NAME AND a.SEQ_IN_INDEX &#x3D; b.SEQ_IN_INDEXAND a.COLUMN_NAME &#x3D; b.COLUMN_NAMEWHERE a.SEQ_IN_INDEX &#x3D; 1 AND a.INDEX_NAME &lt;&gt; b.INDEX_NAME 索引的维护以及优化–查找重复以及冗余索引MYSQL 目前只能通过慢查询日志配合pt-index-usage工具来进行索引使用情况分析两个工具 12pt-index-usage -uroot -p &#39;123456&#39; -h 127.0.0.1MYS （索引使用频率工具）pt-duplicate-key-checker -uroot -p &#39;123456&#39; -h 127.0.0.1MYS （索引重复以及冗余索引工具）","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/tags/MySQL/"},{"name":"性能优化","slug":"性能优化","permalink":"http://jas-wang.fun/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"索引优化，SQL优化","slug":"索引优化，SQL优化","permalink":"http://jas-wang.fun/tags/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%EF%BC%8CSQL%E4%BC%98%E5%8C%96/"}]},{"title":"PHP技术学习路线","slug":"route","date":"2018-01-15T01:52:46.000Z","updated":"2020-07-21T09:58:47.359Z","comments":true,"path":"2018/01/15/route/","link":"","permalink":"http://jas-wang.fun/2018/01/15/route/","excerpt":"","text":"入门阶段预备知识 掌握基本HTML、JS、CSS语法；熟悉 Bootstrap。验收最低标准：模仿写出jd.com或者vip.com首页第一屏内容。 熟悉Linux命令行熟悉常用发行版系统(CentOS、Ubuntu)安装熟悉常用命令行操作，包括文件管理、用户管理、权限管理、防火墙管理等熟悉VIM使用 验收最低标准：掌握lnmp环境搭建。 PHP基础 掌握PHP基础语法、文件上传、cookie、Session、JSON。 掌握MySQL数据库连接：pdo使用。 掌握redis连接及简单应用。 掌握命名空间。 掌握面向对象编程思想。 参考：https://www.runoob.com/php/php-tutorial.html 学习框架 学会使用ThinkPHP框架。主要是该框架在国内使用普及率太高了。不建议使用Laravel入门，因为该框架使用了较多的语法糖、第三方库，对新手可能有难度。 验收最低标准：可以使用ThinkPHP最新版作为入手框架，写出一个简单的博客。页面简单写就行。数据之间使用TP的 display 渲染到页面。 学习写接口 学会 Charles 抓包，看豆瓣的接口返回的数据。 学会写接口（GET、POST）的就行。 学会使用 POSTMAN。 验收标最低准：把上面的博客项目改成前后端分离的，先写完接口（最好有文档），再在页面里使用ajax调用接口数据。 至此，你已经入门了。如果需要继续往下，还要学习。 第二阶段PHP 使用 composer 安装PHP第三方库 对于PHP断点调试非常熟悉 学习常用PHP扩展 使用 SPL 掌握 PSR 规范 掌握反射的使用 掌握设计模式 熟练使用常用框架。 了解php和php-fpm的大部分配置选项和含义。 熟悉HTTP协议。 熟悉正则表达式。 MYSQL 熟悉MYSQL优化的一些技巧，例如MySQL的性能追查，包括slow_log/explain等；对于order by、limit、like等一些坑能避开；能够熟练使用常用的索引；对于表结构创建选用哪种数据类型做到胸有成竹等等。 熟悉常用的配置，知道如何调优。 熟练配置主从。 NOSQL 掌握Redis使用：对于常用数据结构的经典使用场景非常熟悉；了解Redis的事务、RDB、AOF等机制。 掌握memcache的使用，知道与redis的区别。 了解一下MongoDB。 Linux 熟悉常用文本命令：例如wc、awk、split、diff、grep、sed等。 熟悉sort、uniq的使用。 熟练掌握ps、netstat、top等命令使用。 熟练使用Supervisor。 熟悉如何编写shell脚本。 能够理解Nginx的配置的含义。 第三阶段PHP 该阶段PHP已经非常熟悉了，拥有快速开发项目、快速解决BUG的能力。代码遵循psr规范、稳定性很高。 熟悉消息队列使用，在很多场景合适的选择消息队列进行异步解耦。 熟悉如何使用 Elasticsearch 代替MYSQL的全文搜索功能。 熟悉多进程编程。 熟悉socket编程，对于网络IO模型有一定的认知，熟悉多路复用(select/poll/epoll)技术。 熟悉swoole框架，能应用于项目上。 不限制于框架本身，任何框架一天内快速入手。 对php的工作机制熟悉，熟悉php-fpm生命周期。 能够知道PHP相对于c等强类型语言性能为什么会慢。 对于PHP内部的实现原理有一定的认知，例如变量的实现、zend引擎的了解。 对于PHP的扩展有一定的认知，可以编写简单的扩展。 MYSQL 熟悉大批量的数据导入导出。对于线上大表操作可能带来的风险有预知。 熟悉分库分表。 对主从延迟能有效解决。 对于MySQL内置的一些函数能够熟练使用，熟悉触发器、存储过程的使用。 熟悉服务器核心性能优化选项 innodb_log_buffer_size、back_log、table_open_cache、thread_cache_size、innodb_lock_wait_timeout等。 对于MySQL内部索引的实现、事务隔离机制有一定的认知。 NoSQL redis常用5中数据类型之外的数据结构也要能掌握一些。如bitmap、GEO、HyperLogLog、pub/sub等。 redis里的事务、管道、分布式锁能熟练使用。 对于redis的服务端结构能有一定认知。 熟悉redis里如何使用Lua。 尝试阅读redis源码。 Linux 对于nginx非常熟悉，能够熟练配置https、负载均衡、反向代理；能够使用 lua-nginx-module。 对awk/sed 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据。 对于tcpdump、gdb、ltrace、strace、lsof等熟练使用。 其它 熟悉Linux应用编程：熟悉makefile使用；熟悉进程、信号、I/O知识；对于C语言有一定的了解。 熟练elk。 对于其它语言(例如java、c、golang）、其它领域(大数据)有一定的认知。 熟悉RPC、微服务架构。 能够支持对于千万级流量网站的正常开发维护工作。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/tags/PHP/"},{"name":"技术栈","slug":"技术栈","permalink":"http://jas-wang.fun/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"}]}],"categories":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/categories/PHP/"},{"name":"Linux","slug":"Linux","permalink":"http://jas-wang.fun/categories/Linux/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/categories/MySQL/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://jas-wang.fun/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jas-wang.fun/tags/MySQL/"},{"name":"高并发","slug":"高并发","permalink":"http://jas-wang.fun/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"},{"name":"Linux","slug":"Linux","permalink":"http://jas-wang.fun/tags/Linux/"},{"name":"服务器","slug":"服务器","permalink":"http://jas-wang.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"设计模式","slug":"设计模式","permalink":"http://jas-wang.fun/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"性能优化","slug":"性能优化","permalink":"http://jas-wang.fun/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"工具","slug":"工具","permalink":"http://jas-wang.fun/tags/%E5%B7%A5%E5%85%B7/"},{"name":"数据库结构优化","slug":"数据库结构优化","permalink":"http://jas-wang.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E4%BC%98%E5%8C%96/"},{"name":"索引优化，SQL优化","slug":"索引优化，SQL优化","permalink":"http://jas-wang.fun/tags/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%EF%BC%8CSQL%E4%BC%98%E5%8C%96/"},{"name":"技术栈","slug":"技术栈","permalink":"http://jas-wang.fun/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"}]}